<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Finalizing the application - Catel documentation</title>
    <link rel="shortcut icon" href="../../favicon.ico">
    <link rel="stylesheet" href="../../css/theme.css" type="text/css" />
    <link rel="stylesheet" href="../../css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="../../css/styles/vs.css">
    <link rel="stylesheet" href="../../css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="/welcome/index.htm"><i class="fa fa-home"></i> Catel documentation</a>
                <div role="search">
                    <form id="search-form" class="form" action="../../Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="../../Home.htm">Home</a>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Introduction.htm">Introduction</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../FAQ.htm">FAQ</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Setup,deployment&projects.htm">Setup, deployment & projects</a></span>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../../Gettingstarted.htm">Getting started</a></span></li>
<li class="tocentry"><a href="../../getting-started/quick-introduction-for-developers.htm">Quick introduction for developers</a>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../../WPF.htm">WPF</a></span></li>
<li class="tocentry"><a href="../../getting-started/wpf/introduction.htm">Introduction</a>
</li>
<li class="tocentry"><a href="../../getting-started/wpf/creating-the-project.htm">Creating the project</a>
</li>
<li class="tocentry"><a href="../../getting-started/wpf/creating-the-models.htm">Creating the models</a>
</li>
<li class="tocentry"><a href="../../getting-started/wpf/serializing-data-from-to-disk.htm">Serializing data from/to disk</a>
</li>
<li class="tocentry"><a href="../../getting-started/wpf/creating-the-view-models.htm">Creating the view models</a>
</li>
<li class="tocentry"><a href="../../getting-started/wpf/creating-the-user-controls.htm">Creating the user controls</a>
</li>
<li class="tocentry"><a href="../../getting-started/wpf/creating-the-windows.htm">Creating the windows</a>
</li>
<li class="tocentry"><a href="../../getting-started/wpf/hooking-up-everything-together.htm">Hooking up everything together</a>
</li>
<li class="tocentry current"><a class="current" href="../../getting-started/wpf/finalizing-the-application.htm">Finalizing the application</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#adding-validation">Adding validation</a></li>
<li class="tocentry"><a href="#adding-behaviors-to-enable-double-click-on-the-list-boxes">Adding behaviors to enable double-click on the list boxes</a></li>
<li class="tocentry"><a href="#adding-search-functionality-to-the-main-window">Adding search functionality to the main window</a></li>
</ul>

</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../XamarinForms.htm">Xamarin Forms</a></span>
</li>

</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Examples.htm">Examples</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../CatelCore.htm">Catel.Core</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../CatelMVVM.htm">Catel.MVVM</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../CatelFody.htm">Catel.Fody</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../CatelReSharper.htm">Catel.ReSharper</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../tips-tricks/index.htm">Tips & tricks</a></span>
</li>

</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="../../index.htm">Catel documentation</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="../../Home.htm">Home</a></li> / <li><a href="../../Gettingstarted.htm">Getting started</a></li> / <li><a href="../../WPF.htm">WPF</a></li> / <li><a href="../../getting-started/wpf/finalizing-the-application.htm">Finalizing the application</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="finalizing-the-application">Finalizing the application<a class="headerlink" href="#finalizing-the-application" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>The application we have created so far is fully functional, but misses a bit of the &quot;magic&quot;. Below are some additional steps that might make your application more appealing and more user friendly. Of course you can go as far as you want by creating custom animations and such, but this guide focuses purely on making the basics more appealing.</p>
<h2 id="adding-validation">Adding validation<a class="headerlink" href="#adding-validation" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Adding validation with Catel is extremely easy. There are two flavors to pick from, but they work exactly the same (since both the models and view models internally derive from <em>ModelBase</em>). To add validation to the <em>Person</em> model, use this code:</p>
<pre class="nocode">protected override void ValidateFields(List&lt;IFieldValidationResult&gt; validationResults)
{
    if (string.IsNullOrWhiteSpace(FirstName))
    {
        validationResults.Add(FieldValidationResult.CreateError(FirstNameProperty, &quot;The first name is required&quot;));
    }

    if (string.IsNullOrWhiteSpace(LastName))
    {
        validationResults.Add(FieldValidationResult.CreateError(LastNameProperty, &quot;The last name is required&quot;));
    }
}
</pre><p>The validation for the <em>Family</em> model is very easy as well:</p>
<pre class="nocode">protected override void ValidateFields(List&lt;IFieldValidationResult&gt; validationResults)
{
    if (string.IsNullOrWhiteSpace(FamilyName))
    {
        validationResults.Add(FieldValidationResult.CreateError(FamilyNameProperty, &quot;The family name is required&quot;));
    }
}
</pre><div class="alert alert-info"><span class="alert-title"><i class="fa fa-info-circle"></i> Info</span><p>Note that this validation code can be used in both the model and/or the view models</p>
</div><h2 id="adding-behaviors-to-enable-double-click-on-the-list-boxes">Adding behaviors to enable double-click on the list boxes<a class="headerlink" href="#adding-behaviors-to-enable-double-click-on-the-list-boxes" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>The user must manually click the <em>Edit</em> buttons in the editable views to edit a specific model. To make it easier for the user, we can enable double click to command behaviors. To do so, navigate to the <em>MainWindow</em> and add this to the <em>ListBox</em> definition:</p>
<pre class="nocode">&lt;ListBox x:Name=&quot;listBox&quot; ItemsSource=&quot;{Binding Families}&quot; SelectedItem=&quot;{Binding SelectedFamily}&quot;&gt;
    &lt;ListBox.ItemTemplate&gt;
        &lt;DataTemplate&gt;
            &lt;Grid&gt;
                &lt;i:Interaction.Behaviors&gt;
                    &lt;catel:DoubleClickToCommand Command=&quot;{Binding ElementName=listBox, Path=DataContext.EditFamily}&quot; /&gt;
                &lt;/i:Interaction.Behaviors&gt;

                &lt;views:FamilyView DataContext=&quot;{Binding}&quot; /&gt;
            &lt;/Grid&gt;
        &lt;/DataTemplate&gt;
    &lt;/ListBox.ItemTemplate&gt;
&lt;/ListBox&gt;
</pre><p>The same goes for the <em>FamilyWindow</em>:</p>
<pre class="nocode">&lt;ListBox x:Name=&quot;listBox&quot; ItemsSource=&quot;{Binding Persons}&quot; SelectedItem=&quot;{Binding SelectedPerson}&quot;&gt;
    &lt;ListBox.ItemTemplate&gt;
        &lt;DataTemplate&gt;
            &lt;Grid&gt;
                &lt;i:Interaction.Behaviors&gt;
                    &lt;catel:DoubleClickToCommand Command=&quot;{Binding ElementName=listBox, Path=DataContext.EditPerson}&quot; /&gt;
                &lt;/i:Interaction.Behaviors&gt;

                &lt;views:PersonView DataContext=&quot;{Binding}&quot; /&gt;
            &lt;/Grid&gt;
        &lt;/DataTemplate&gt;
    &lt;/ListBox.ItemTemplate&gt;
&lt;/ListBox&gt;
 
</pre><div class="alert alert-warning"><span class="alert-title"><i class="fa fa-warning"></i> Important!</span><p>Note that the <em>xmlns:i=&quot;http://schemas.microsoft.com/expression/2010/interactivity&quot;</em> must be added in order for the code above to compile</p>
</div><h2 id="adding-search-functionality-to-the-main-window">Adding search functionality to the main window<a class="headerlink" href="#adding-search-functionality-to-the-main-window" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>A functionality that is needed in a lot of applications is search functionality. To implement this we will need to modify the <em>MainWindowViewModel</em>. Below are the steps required to implement search functionality.</p>
<h3 id="adding-additional-properties-to-the-view-model">Adding additional properties to the view model<a class="headerlink" href="#adding-additional-properties-to-the-view-model" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Lets start by adding the additional properties required to implement searching in the <em>MainWindowViewModel</em>:</p>
<pre class="nocode">/// &lt;summary&gt;
/// Gets the filtered families.
/// &lt;/summary&gt;
public ObservableCollection&lt;Family&gt; FilteredFamilies
{
    get { return GetValue&lt;ObservableCollection&lt;Family&gt;&gt;(FilteredFamiliesProperty); }
    private set { SetValue(FilteredFamiliesProperty, value); }
}

/// &lt;summary&gt;
/// Register the FilteredFamilies property so it is known in the class.
/// &lt;/summary&gt;
public static readonly PropertyData FilteredFamiliesProperty = RegisterProperty(&quot;FilteredFamilies&quot;, typeof(ObservableCollection&lt;Family&gt;));

/// &lt;summary&gt;
/// Gets or sets the search filter.
/// &lt;/summary&gt;
public string SearchFilter
{
    get { return GetValue&lt;string&gt;(SearchFilterProperty); }
    set { SetValue(SearchFilterProperty, value); }
}

/// &lt;summary&gt;
/// Register the SearchFilter property so it is known in the class.
/// &lt;/summary&gt;
public static readonly PropertyData SearchFilterProperty = RegisterProperty(&quot;SearchFilter&quot;, typeof(string), null, (sender, e) =&gt; ((MainWindowViewModel)sender).UpdateSearchFilter());
</pre><div class="alert alert-info"><span class="alert-title"><i class="fa fa-info-circle"></i> Info</span><p>Note that this property contains an additional change callback function which will be called when the property has changed.</p>
</div><p>Add the following import to the view model. You will needed because native <strong>ObservableCollection</strong> class does not support <strong>ReplaceRange()</strong></p>
<pre class="nocode">using Catel.Collections;
</pre><p>Add this method to the view model:</p>
<pre class="nocode">/// &lt;summary&gt;
/// Updates the filtered items.
/// &lt;/summary&gt;
private void UpdateSearchFilter()
{
    if (FilteredFamilies == null)
    {
        FilteredFamilies = new ObservableCollection&lt;Family&gt;();
    }

    if (string.IsNullOrWhiteSpace(SearchFilter))
    {
        FilteredFamilies.ReplaceRange(Families);
    }
    else
    {
        var lowerSearchFilter = SearchFilter.ToLower();
        FilteredFamilies.ReplaceRange(from family in Families
                                      where !string.IsNullOrWhiteSpace(family.FamilyName) &amp;&amp; family.FamilyName.ToLower().Contains(lowerSearchFilter)
                                      select family);
    }
}
</pre><p>Then, add this code to the <em>OnAddFamilyExecute</em> function:</p>
<pre class="nocode">private async void OnAddFamilyExecute()
{
    var family = new Family();

    // Note that we use the type factory here because it will automatically take care of any dependencies
    // that the FamilyWindowViewModel will add in the future
    var typeFactory = this.GetTypeFactory();
    var familyWindowViewModel = typeFactory.CreateInstanceWithParametersAndAutoCompletion&lt;FamilyWindowViewModel&gt;(family);
    if (await _uiVisualizerService.ShowDialog(familyWindowViewModel) ?? false)
    {
        Families.Add(family);
        UpdateSearchFilter();
    }
}
</pre><p>Last but not least, add this to the <em>InitializeAsync</em> method <strong>after</strong> the <em>Families</em> is set from the <em>IFamilyService</em></p>
<pre class="nocode">protected override async Task InitializeAsync()
{
    var families = _familyService.LoadFamilies();
    Families = new ObservableCollection&lt;Family&gt;(families);

    UpdateSearchFilter();
}
</pre><h3 id="adding-the-search-functionality-to-the-view">Adding the search functionality to the view<a class="headerlink" href="#adding-the-search-functionality-to-the-view" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Replace the xaml of the main window by the following content:</p>
<pre class="nocode"> &lt;catel:StackGrid&gt;
    &lt;catel:StackGrid.RowDefinitions&gt;
        &lt;RowDefinition Height=&quot;Auto&quot; /&gt;
        &lt;RowDefinition Height=&quot;*&quot; /&gt;
    &lt;/catel:StackGrid.RowDefinitions&gt;
    &lt;catel:StackGrid.ColumnDefinitions&gt;
        &lt;ColumnDefinition Width=&quot;*&quot; /&gt;
        &lt;ColumnDefinition Width=&quot;100&quot; /&gt;
    &lt;/catel:StackGrid.ColumnDefinitions&gt;

    &lt;catel:StackGrid Grid.ColumnSpan=&quot;2&quot;&gt;
        &lt;catel:StackGrid.ColumnDefinitions&gt;
            &lt;ColumnDefinition Width=&quot;Auto&quot; /&gt;
            &lt;ColumnDefinition Width=&quot;*&quot; /&gt;
        &lt;/catel:StackGrid.ColumnDefinitions&gt;

        &lt;Label Content=&quot;Filter:&quot; /&gt;
        &lt;TextBox Text=&quot;{Binding SearchFilter}&quot;&gt;
            &lt;i:Interaction.Behaviors&gt;
                &lt;catel:UpdateBindingOnTextChanged UpdateDelay=&quot;500&quot; /&gt;
            &lt;/i:Interaction.Behaviors&gt;
        &lt;/TextBox&gt;
    &lt;/catel:StackGrid&gt;

    &lt;ListBox x:Name=&quot;listBox&quot; ItemsSource=&quot;{Binding FilteredFamilies}&quot; SelectedItem=&quot;{Binding SelectedFamily}&quot;&gt;
        &lt;ListBox.ItemTemplate&gt;
            &lt;DataTemplate&gt;
                &lt;Grid&gt;
                    &lt;i:Interaction.Behaviors&gt;
                        &lt;catel:DoubleClickToCommand Command=&quot;{Binding ElementName=listBox, Path=DataContext.EditFamily}&quot; /&gt;
                    &lt;/i:Interaction.Behaviors&gt;
                    &lt;views:FamilyView DataContext=&quot;{Binding}&quot; /&gt;
                &lt;/Grid&gt;
            &lt;/DataTemplate&gt;
        &lt;/ListBox.ItemTemplate&gt;
    &lt;/ListBox&gt;

    &lt;StackPanel&gt;
        &lt;Button Command=&quot;{Binding AddFamily}&quot; Content=&quot;Add...&quot; /&gt;
        &lt;Button Command=&quot;{Binding EditFamily}&quot; Content=&quot;Edit...&quot; /&gt;
        &lt;Button Command=&quot;{Binding RemoveFamily}&quot; Content=&quot;Remove&quot; /&gt;
    &lt;/StackPanel&gt;
&lt;/catel:StackGrid&gt;
</pre>
                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">

                      <p>Is this section not up-to-date or found an issue? Please <a href="https://github.com/Catel/catel.github.io/blob/master/src/../src/vnext/getting-started/wpf/finalizing-the-application.md" target="_blank">contribute</a>!</p>
                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="../../js/jquery-2.1.1.min.js"></script>
    <script src="../../js/modernizr-2.8.3.min.js"></script>
    <script src="../../js/highlight.pack.js"></script>
    <script src="../../js/theme.js"></script>

    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
    
      ga('create', 'UA-25600919-4', 'auto');
      ga('send', 'pageview');
    
    </script>
</body>
</html>
