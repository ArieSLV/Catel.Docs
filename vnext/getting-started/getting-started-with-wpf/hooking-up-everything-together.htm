<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Hooking up everything together - Catel documentation</title>
    <link rel="shortcut icon" href="../../favicon.ico">
    <link rel="stylesheet" href="../../css/theme.css" type="text/css" />
    <link rel="stylesheet" href="../../css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="../../css/styles/vs.css">
    <link rel="stylesheet" href="../../css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="../../index.htm"><i class="fa fa-home"></i> Catel documentation</a>
                <div role="search">
                    <form id="search-form" class="form" action="../../Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="../../Home.htm">Home</a>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Introduction.htm">Introduction</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../FAQ.htm">FAQ</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Setup,deployment&projects.htm">Setup, deployment & projects</a></span>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../../Gettingstarted.htm">Getting started</a></span></li>
<li class="tocentry"><a href="../../getting-started/quick-introduction-for-developers.htm">Quick introduction for developers</a>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../../GettingstartedwithWPF.htm">Getting started with WPF</a></span></li>
<li class="tocentry"><a href="../../getting-started/getting-started-with-wpf/introduction.htm">Introduction</a>
</li>
<li class="tocentry"><a href="../../getting-started/getting-started-with-wpf/creating-the-project.htm">Creating the project</a>
</li>
<li class="tocentry"><a href="../../getting-started/getting-started-with-wpf/creating-the-models.htm">Creating the models</a>
</li>
<li class="tocentry"><a href="../../getting-started/getting-started-with-wpf/serializing-data-from-to-disk.htm">Serializing data from/to disk</a>
</li>
<li class="tocentry"><a href="../../getting-started/getting-started-with-wpf/creating-the-view-models.htm">Creating the view models</a>
</li>
<li class="tocentry"><a href="../../getting-started/getting-started-with-wpf/creating-the-user-controls.htm">Creating the user controls</a>
</li>
<li class="tocentry"><a href="../../getting-started/getting-started-with-wpf/creating-the-windows.htm">Creating the windows</a>
</li>
<li class="tocentry current"><a class="current" href="../../getting-started/getting-started-with-wpf/hooking-up-everything-together.htm">Hooking up everything together</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#hooking-up-the-view-models">Hooking up the view models</a></li>
<li class="tocentry"><a href="#hooking-up-the-views">Hooking up the views</a></li>
</ul>
<li class="tocentry"><a href="../../getting-started/getting-started-with-wpf/finalizing-the-application.htm">Finalizing the application</a>
</li>

</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../GettingstartedwithXamarinForms.htm">Getting started with Xamarin Forms</a></span>
</li>

</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Examples.htm">Examples</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../CatelCore.htm">Catel.Core</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../CatelMVVM.htm">Catel.MVVM</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../tips-tricks/index.htm">Tips & tricks</a></span>
</li>

</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="../../index.htm">Catel documentation</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="../../Home.htm">Home</a></li> / <li><a href="../../Gettingstarted.htm">Getting started</a></li> / <li><a href="../../GettingstartedwithWPF.htm">Getting started with WPF</a></li> / <li><a href="../../getting-started/getting-started-with-wpf/hooking-up-everything-together.htm">Hooking up everything together</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="hooking-up-everything-together">Hooking up everything together<a class="headerlink" href="#hooking-up-everything-together" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>In this step we will hook everything together and add additional logic to the remaining view models.</p>
<h2 id="hooking-up-the-view-models">Hooking up the view models<a class="headerlink" href="#hooking-up-the-view-models" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>We now have most of the application ready. However we need some logic in the view models to hook up everything together.</p>
<h3 id="adding-additional-logic-tofamilywindowviewmodel">Adding additional logic to FamilyWindowViewModel<a class="headerlink" href="#adding-additional-logic-tofamilywindowviewmodel" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>The first thing we are going to do is to finalize the <em>FamilyWindowViewModel</em> we created in the previous step. To do this, we are going to add a few properties and commands to the view model.</p>
<h4 id="adding-additional-dependencies-being-injected">Adding additional dependencies being injected<a class="headerlink" href="#adding-additional-dependencies-being-injected" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h4>
<p>Since we will be using additional services inside the <em>FamilyWindowViewModel</em>, it is important to add them as dependency via the constructor. The updated constructor will look like this:</p>
<pre class="nocode">{.java data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot; style=&quot;brush: java; gutter: false; theme: Confluence&quot;}
public FamilyWindowViewModel(Family family, IUIVisualizerService uiVisualizerService, IMessageService messageService)
{
    Argument.IsNotNull(() =&gt; family);
    Argument.IsNotNull(() =&gt; uiVisualizerService);
    Argument.IsNotNull(() =&gt; messageService);

    Family = family;
    _uiVisualizerService = uiVisualizerService;
    _messageService = messageService;
}
</pre><p>Don't forget to create the right backing fields <em>_uiVisualizerService</em> and <em>_messageService</em></p>
<h4 id="adding-the-properties">Adding the properties<a class="headerlink" href="#adding-the-properties" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h4>
<p>We need a property representing the currently selected person in edit mode of a family. Below is the property definition which needs to be added to the view model:</p>
<pre class="nocode">{.java data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot; style=&quot;brush: java; gutter: false; theme: Confluence&quot;}
/// &lt;summary&gt;
/// Gets or sets the selected person.
/// &lt;/summary&gt;
public Person SelectedPerson
{
    get { return GetValue&lt;Person&gt;(SelectedPersonProperty); }
    set { SetValue(SelectedPersonProperty, value); }
}

/// &lt;summary&gt;
/// Register the SelectedPerson property so it is known in the class.
/// &lt;/summary&gt;
public static readonly PropertyData SelectedPersonProperty = RegisterProperty(&quot;SelectedPerson&quot;, typeof(Person), null);
</pre><h4 id="adding-the-commands">Adding the commands<a class="headerlink" href="#adding-the-commands" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h4>
<p>Note that we recommend that you use the <em>vmcommand</em> and <em>vmcommandwithcanexecute</em> code snippets available <a href="http://www.catelproject.com/download/general-files/" target="_blank">here</a></p>
<p>Below is the code which comes in two parts.</p>
<p>1. Add this code to the constructor:</p>
<pre class="nocode">{.java data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot; style=&quot;brush: java; gutter: false; theme: Confluence&quot;}
AddPerson = new TaskCommand(OnAddPersonExecuteAsync);
EditPerson = new TaskCommand(OnEditPersonExecuteAsync, OnEditPersonCanExecute);
RemovePerson = new TaskCommand(OnRemovePersonExecuteAsync, OnRemovePersonCanExecute);
</pre><ol>
<li>You must import <strong>Catel.IoC</strong> namespace since it contains <strong>ViewModelBase</strong>'s <strong>GetTypeFactory()</strong> extension method used below.</li>
</ol>
<pre class="nocode">{.java data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot; style=&quot;brush: java; gutter: false; theme: Confluence&quot;}
using Catel.IoC;
</pre><ol>
<li>Add this code to the view model itself:</li>
</ol>
<pre class="nocode">{.java data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot; style=&quot;brush: java; gutter: false; theme: Confluence&quot;}
 /// &lt;summary&gt;
/// Gets the AddPerson command.
/// &lt;/summary&gt;
public TaskCommand AddPerson { get; private set; }

/// &lt;summary&gt;
/// Method to invoke when the AddPerson command is executed.
/// &lt;/summary&gt;
private async Task OnAddPersonExecuteAsync()
{
    var person = new Person();
    person.LastName = FamilyName;
    // Note that we use the type factory here because it will automatically take care of any dependencies
    // that the PersonViewModel will add in the future
    var typeFactory = this.GetTypeFactory();
    var personViewModel = typeFactory.CreateInstanceWithParametersAndAutoCompletion&lt;PersonViewModel&gt;(person);
    if (await _uiVisualizerService.ShowDialogAsync(personViewModel) ?? false)
    {
        Persons.Add(person);
    }
}

/// &lt;summary&gt;
/// Gets the EditPerson command.
/// &lt;/summary&gt;
public TaskCommand EditPerson { get; private set; }

/// &lt;summary&gt;
/// Method to check whether the EditPerson command can be executed.
/// &lt;/summary&gt;
/// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the command can be executed; otherwise &lt;c&gt;false&lt;/c&gt;&lt;/returns&gt;
private bool OnEditPersonCanExecute()
{
    return SelectedPerson != null;
}

/// &lt;summary&gt;
/// Method to invoke when the EditPerson command is executed.
/// &lt;/summary&gt;
private async Task OnEditPersonExecuteAsync()
{
    // Note that we use the type factory here because it will automatically take care of any dependencies
    // that the PersonViewModel will add in the future
    var typeFactory = this.GetTypeFactory();
    var personViewModel = typeFactory.CreateInstanceWithParametersAndAutoCompletion&lt;PersonViewModel&gt;(SelectedPerson);
    await _uiVisualizerService.ShowDialogAsync(personViewModel);
}

/// &lt;summary&gt;
/// Gets the RemovePerson command.
/// &lt;/summary&gt;
public TaskCommand RemovePerson { get; private set; }

/// &lt;summary&gt;
/// Method to check whether the RemovePerson command can be executed.
/// &lt;/summary&gt;
/// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the command can be executed; otherwise &lt;c&gt;false&lt;/c&gt;&lt;/returns&gt;
private bool OnRemovePersonCanExecute()
{
    return SelectedPerson != null;
}

/// &lt;summary&gt;
/// Method to invoke when the RemovePerson command is executed.
/// &lt;/summary&gt;
private async Task OnRemovePersonExecuteAsync()
{
    if (await _messageService.ShowAsync(string.Format(&quot;Are you sure you want to delete the person '{0}'?&quot;, SelectedPerson), 
        &quot;Are you sure?&quot;, MessageButton.YesNo, MessageImage.Question) == MessageResult.Yes)
    {
        Persons.Remove(SelectedPerson);
        SelectedPerson = null;
    }
}
</pre><h3 id="adding-additional-logic-to-the-mainwindowviewmodel">Adding additional logic to the MainWindowViewModel<a class="headerlink" href="#adding-additional-logic-to-the-mainwindowviewmodel" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>The same edit functionality we added to the <em>FamilyWindowViewModel</em> must be added to the <em>MainWindowViewModel</em>. The difference is that instead of adding / editing / removing persons, the <em>MainWindowViewModel</em> will do this for families.</p>
<h4 id="adding-additional-dependencies-being-injected-1">Adding additional dependencies being injected<a class="headerlink" href="#adding-additional-dependencies-being-injected-1" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h4>
<p>We will again need additional dependencies. Below is the updated constructor for the <em>MainWindowViewModel</em>:</p>
<pre class="nocode">{.java data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot; style=&quot;brush: java; gutter: false; theme: Confluence&quot;}
public MainWindowViewModel(IFamilyService familyService, IUIVisualizerService uiVisualizerService, IMessageService messageService)
{
    Argument.IsNotNull(() =&gt; familyService);
    Argument.IsNotNull(() =&gt; uiVisualizerService);
    Argument.IsNotNull(() =&gt; messageService);

    _familyService = familyService;
    _uiVisualizerService = uiVisualizerService;
    _messageService = messageService;
}
</pre><h4 id="adding-the-properties-1">Adding the properties<a class="headerlink" href="#adding-the-properties-1" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h4>
<p>We will again need a property to handle the selected family:</p>
<pre class="nocode">{.java data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot; style=&quot;brush: java; gutter: false; theme: Confluence&quot;}
/// &lt;summary&gt;
/// Gets or sets the selected family.
/// &lt;/summary&gt;
public Family SelectedFamily
{
    get { return GetValue&lt;Family&gt;(SelectedFamilyProperty); }
    set { SetValue(SelectedFamilyProperty, value); }
}

/// &lt;summary&gt;
/// Register the SelectedFamily property so it is known in the class.
/// &lt;/summary&gt;
public static readonly PropertyData SelectedFamilyProperty = RegisterProperty(&quot;SelectedFamily&quot;, typeof(Family), null);
</pre><h4 id="adding-the-commands-1">Adding the commands<a class="headerlink" href="#adding-the-commands-1" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h4>
<p>Last but not least, we will also add the commands to the *MainWindowViewModel *to handle the logic.</p>
<p>1. Add this code to the constructor:</p>
<pre class="nocode">{.java data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot; style=&quot;brush: java; gutter: false; theme: Confluence&quot;}
AddFamily = new TaskCommand (OnAddFamilyExecuteAsync);
EditFamily = new TaskCommand (OnEditFamilyExecuteAsync, OnEditFamilyCanExecute);
RemoveFamily = new TaskCommand (OnRemoveFamilyExecuteAsync, OnRemoveFamilyCanExecute);
</pre><ol>
<li>Add this code to the view model itself:</li>
</ol>
<pre class="nocode">{.java data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot; style=&quot;brush: java; gutter: false; theme: Confluence&quot;}
/// &lt;summary&gt;
/// Gets the AddFamily command.
/// &lt;/summary&gt;
public TaskCommand AddFamily { get; private set; }

/// &lt;summary&gt;
/// Method to invoke when the AddFamily command is executed.
/// &lt;/summary&gt;
private async Task OnAddFamilyExecuteAsync()
{
    var family = new Family();
    // Note that we use the type factory here because it will automatically take care of any dependencies
    // that the FamilyWindowViewModel will add in the future
    var typeFactory = this.GetTypeFactory();
    var familyWindowViewModel = typeFactory.CreateInstanceWithParametersAndAutoCompletion&lt;FamilyWindowViewModel&gt;(family);
    if (await _uiVisualizerService.ShowDialogAsync(familyWindowViewModel) ?? false)
    {
        Families.Add(family);
    }
}

/// &lt;summary&gt;
/// Gets the EditFamily command.
/// &lt;/summary&gt;
public TaskCommand EditFamily { get; private set; }

/// &lt;summary&gt;
/// Method to check whether the EditFamily command can be executed.
/// &lt;/summary&gt;
/// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the command can be executed; otherwise &lt;c&gt;false&lt;/c&gt;&lt;/returns&gt;
private bool OnEditFamilyCanExecute()
{
    return SelectedFamily != null;
}

/// &lt;summary&gt;
/// Method to invoke when the EditFamily command is executed.
/// &lt;/summary&gt;
private async Task OnEditFamilyExecuteAsync()
{
    // Note that we use the type factory here because it will automatically take care of any dependencies
    // that the PersonViewModel will add in the future
    var typeFactory = this.GetTypeFactory();
    var familyWindowViewModel = typeFactory.CreateInstanceWithParametersAndAutoCompletion&lt;FamilyWindowViewModel&gt;(SelectedFamily);
    await _uiVisualizerService.ShowDialogAsync(familyWindowViewModel);
}

/// &lt;summary&gt;
/// Gets the RemoveFamily command.
/// &lt;/summary&gt;
public TaskCommand RemoveFamily { get; private set; }

/// &lt;summary&gt;
/// Method to check whether the RemoveFamily command can be executed.
/// &lt;/summary&gt;
/// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the command can be executed; otherwise &lt;c&gt;false&lt;/c&gt;&lt;/returns&gt;
private bool OnRemoveFamilyCanExecute()
{
    return SelectedFamily != null;
}

/// &lt;summary&gt;
/// Method to invoke when the RemoveFamily command is executed.
/// &lt;/summary&gt;
private async Task OnRemoveFamilyExecuteAsync()
{
    if (await _messageService.ShowAsync(string.Format(&quot;Are you sure you want to delete the family '{0}'?&quot;, SelectedFamily),
        &quot;Are you sure?&quot;, MessageButton.YesNo, MessageImage.Question) == MessageResult.Yes)
    {
        Families.Remove(SelectedFamily);
        SelectedFamily = null;
    }
}
</pre><h2 id="hooking-up-the-views">Hooking up the views<a class="headerlink" href="#hooking-up-the-views" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>We now have all the views ready, but we don't see anything yet. The reason for this is that we haven't modified the <em>MainWindow</em> view yet. To do so, replace the xaml content with the xaml below:</p>
<pre class="nocode">{.java data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot; style=&quot;brush: java; gutter: false; theme: Confluence&quot;}
 &lt;catel:StackGrid&gt;
    &lt;catel:StackGrid.ColumnDefinitions&gt;
        &lt;ColumnDefinition Width=&quot;*&quot; /&gt;
        &lt;ColumnDefinition Width=&quot;100&quot; /&gt;
    &lt;/catel:StackGrid.ColumnDefinitions&gt;

    &lt;ListBox ItemsSource=&quot;{Binding Families}&quot; SelectedItem=&quot;{Binding SelectedFamily}&quot;&gt;
        &lt;ListBox.ItemTemplate&gt;
            &lt;DataTemplate&gt;
                &lt;views:FamilyView DataContext=&quot;{Binding}&quot; /&gt;
            &lt;/DataTemplate&gt;
        &lt;/ListBox.ItemTemplate&gt;
    &lt;/ListBox&gt;

    &lt;StackPanel&gt;
        &lt;Button Command=&quot;{Binding AddFamily}&quot; Content=&quot;Add...&quot; /&gt;
        &lt;Button Command=&quot;{Binding EditFamily}&quot; Content=&quot;Edit...&quot; /&gt;
        &lt;Button Command=&quot;{Binding RemoveFamily}&quot; Content=&quot;Remove&quot; /&gt;
    &lt;/StackPanel&gt;
&lt;/catel:StackGrid&gt;
</pre><p>Now run the application and you should see your fully functional family management application.</p>
<h1 id="up-next">Up next<a class="headerlink" href="#up-next" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p><a href="./finalizing-the-application.htm">Finalizing the application</a></p>

                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">

                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="../../js/jquery-2.1.1.min.js"></script>
    <script src="../../js/modernizr-2.8.3.min.js"></script>
    <script src="../../js/highlight.pack.js"></script>
    <script src="../../js/theme.js"></script>

</body>
</html>
