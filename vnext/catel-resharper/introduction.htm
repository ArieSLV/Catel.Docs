<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Introduction - Catel documentation</title>
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../css/theme.css" type="text/css" />
    <link rel="stylesheet" href="../css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="../css/styles/vs.css">
    <link rel="stylesheet" href="../css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="/welcome/index.htm"><i class="fa fa-home"></i> Catel documentation</a>
                <div role="search">
                    <form id="search-form" class="form" action="../Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="../Home.htm">Home</a>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../Introduction.htm">Introduction</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../FAQ.htm">FAQ</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../Setup,deployment&projects.htm">Setup, deployment & projects</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../Gettingstarted.htm">Getting started</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../Examples.htm">Examples</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../CatelCore.htm">Catel.Core</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../CatelMVVM.htm">Catel.MVVM</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../CatelFody.htm">Catel.Fody</a></span>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../CatelReSharper.htm">Catel.ReSharper</a></span></li>
<li class="tocentry current"><a class="current" href="../catel-resharper/introduction.htm">Introduction</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#checking-arguments-of-a-method">Checking arguments of a method</a></li>
<li class="tocentry"><a href="#converting-regular-properties-into-catel-properties">Converting regular properties into Catel properties</a></li>
</ul>

</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../tips-tricks/index.htm">Tips & tricks</a></span>
</li>

</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="../index.htm">Catel documentation</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="../Home.htm">Home</a></li> / <li><a href="../CatelReSharper.htm">Catel.ReSharper</a></li> / <li><a href="../catel-resharper/introduction.htm">Introduction</a></li></ul>

                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="catel.resharper">Catel.ReSharper<a class="headerlink" href="#catel.resharper" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<h1 id="introduction">Introduction<a class="headerlink" href="#introduction" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>Catel.ReSharper is a ReSharper plugin that helps with development in the following
fields:</p>
<ul>
<li>Make classes to inherits from ModelBase or ViewModelBase</li>
<li>Convert automatic properties to Catel properties</li>
<li>Expose view model properties as view model ones</li>
<li>Check for arguments using the Argument class</li>
</ul>
<p><em>Basically convert this:</em></p>
<pre><code>/// &lt;summary&gt;
///     The person model.
/// &lt;/summary&gt;
public class Person 
{
  #region Public Properties

  /// &lt;summary&gt;
  ///     Gets or sets the first name.
  /// &lt;/summary&gt;
  public string FirstName { get; set; }

  /// &lt;summary&gt;
  ///     Gets or sets the last name.
  /// &lt;/summary&gt;
  public string LastName { get; set; }

  /// &lt;summary&gt;
  ///     Gets or sets the age.
  /// &lt;/summary&gt;
  public int Age { get; set; }

  #endregion
}
</code></pre>

<p><em>into this:</em></p>
<pre><code>/// &lt;summary&gt;
///     The person model.
/// &lt;/summary&gt;
public class Person : ModelBase
{
    #region Static Fields

    /// &lt;summary&gt;Register the FirstName property so it is known in the class.&lt;/summary&gt;
    public static readonly PropertyData FirstNameProperty = RegisterProperty&lt;Person, string&gt;(model =&gt; model.FirstName);

    /// &lt;summary&gt;Register the LastName property so it is known in the class.&lt;/summary&gt;
    public static readonly PropertyData LastNameProperty = RegisterProperty&lt;Person, string&gt;(model =&gt; model.LastName, default(string), (s, e) =&gt; s.OnLastNameChanged());

    /// &lt;summary&gt;Register the Age property so it is known in the class.&lt;/summary&gt;
    public static readonly PropertyData AgeProperty = RegisterProperty&lt;Person, int&gt;(model =&gt; model.Age, default(int), (s, e) =&gt; s.OnAgeChanged(e));

    #endregion

    #region Public Properties

    /// &lt;summary&gt;
    ///     Gets or sets the first name.
    /// &lt;/summary&gt;
    public string FirstName
    {
        get { return this.GetValue&lt;string&gt;(FirstNameProperty); }
        set { this.SetValue(FirstNameProperty, value); }
    }

    /// &lt;summary&gt;
    ///     Gets or sets the last name.
    /// &lt;/summary&gt;
    public string LastName
    {
        get { return this.GetValue&lt;string&gt;(LastNameProperty); }
        set { this.SetValue(LastNameProperty, value); }
    }

    /// &lt;summary&gt;
    ///     Gets or sets the age.
    /// &lt;/summary&gt;
    public int Age
    {
        get { return this.GetValue&lt;int&gt;(AgeProperty); }
        set { this.SetValue(AgeProperty, value); }
    }

    #endregion

    #region Methods

    /// &lt;summary&gt;
    /// Occurs when the value of the Age property is changed.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;e&quot;&gt;
    /// The event argument
    /// &lt;/param&gt;
    private void OnAgeChanged(AdvancedPropertyChangedEventArgs e)
    {
        throw new NotImplementedException();
    }

    /// &lt;summary&gt;
    ///  Occurs when the value of the LastName property is changed.
    /// &lt;/summary&gt;
    private void OnLastNameChanged()
    {
        throw new NotImplementedException();
    }

    #endregion
}
</code></pre>

<p><em>with pleasure!</em></p>
<h2 id="checking-arguments-of-a-method">Checking arguments of a method<a class="headerlink" href="#checking-arguments-of-a-method" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>If you are not using the <em>Argument</em> class, you are definitely missing something! It allows you to check for a method input and make sure it is valid. So, instead of writing this:</p>
<pre><code>public void DoSomething(string myInput)
{
    if (string.IsNullOrWhitespace(myInput)
    {
        Log.Error(&quot;Argument 'myInput' cannot be null or whitespace&quot;);
        throw new ArgumentException(&quot;Argument 'myInput' cannot be null or whitespace&quot;, &quot;myInput&quot;);
    }

    // custom logic
}
</code></pre>

<p>You can write this:</p>
<pre><code>public void DoSomething(string myInput)
{
    Argument.IsNotNullOrWhitespace(() =&gt; myInput);

    // custom logic
}
</code></pre>

<p>However, when you are writing lots of code, then even this piece of code can be too much. Thanks to the* Catel.Resharper* plugin, it is possible to select the argument (in this case myInput), hit ALT + Enter and generate the code.</p>
<h2 id="converting-regular-properties-into-catel-properties">Converting regular properties into Catel properties<a class="headerlink" href="#converting-regular-properties-into-catel-properties" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>to start of metadata</p>
<p>Catel is extremely powerful, but sometimes the property definitions are lots of work to write down. The code snippets already make your life much easier, but with the Catel.Resharper plugin it might be even easier. You can simply write this code:</p>
<pre><code>public class Person : ModelBase
{
    public string FirstName { get; set; }
    public string MiddleName { get; set; }
    public string LastName { get; set; }
}
</code></pre>

<p>Then hit ALT + Enter and turn properties into Catel properties, which will result in this class:</p>
<pre><code>public class Person : ModelBase
{
    /// &lt;summary&gt;
    /// Gets or sets the first name.
    /// &lt;/summary&gt;
    public string FirstName
    {
        get { return GetValue&lt;string&gt;(FirstNameProperty); }
        set { SetValue(FirstNameProperty, value); }
    }
  
    /// &lt;summary&gt;
    /// Register the FirstName property so it is known in the class.
    /// &lt;/summary&gt;
    public static readonly PropertyData FirstNameProperty = RegisterProperty&lt;Person, string&gt;(model =&gt; model.FirstName);
  
    /// &lt;summary&gt;
    /// Gets or sets the middle name.
    /// &lt;/summary&gt;
    public string MiddleName
    {
        get { return GetValue&lt;string&gt;(MiddleNameProperty); }
        set { SetValue(MiddleNameProperty, value); }
    }
  
    /// &lt;summary&gt;
    /// Register the MiddleName property so it is known in the class.
    /// &lt;/summary&gt;
    public static readonly PropertyData MiddleNameProperty = RegisterProperty&lt;Person, string&gt;(model =&gt; model.MiddleName);
  
    /// &lt;summary&gt;
    /// Gets or sets the last name.
    /// &lt;/summary&gt;
    public string LastName
    {
        get { return GetValue&lt;string&gt;(LastNameProperty); }
        set { SetValue(LastNameProperty, value); }
    }
  
    /// &lt;summary&gt;
    /// Register the LastName property so it is known in the class.
    /// &lt;/summary&gt;
    public static readonly PropertyData LastNameProperty = RegisterProperty&lt;Person, string&gt;(model =&gt; model.LastName);
}
</code></pre>


                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">

                      <p>
					    Is this section not up-to-date or found an issue? Please <a href="https://github.com/Catel/catel.github.io/blob/master/src/../src/vnext/catel-resharper/introduction.md" target="_blank">contribute</a>!
					  </p>
					  <p>
					    Have a question about Catel? Use <a href="https://stackoverflow.com/questions/tagged/catel" target="_blank">StackOverflow</a> with the <i>Catel</i> tag!
					  </p>
					  <hr />
					  <p>
					    <h2>Discussion</h2>
					   <div id="disqus_thread"></div>
					   <script>
					   var disqus_config = function () {
					   this.page.url = 'http://docs.catelproject.com/catel-resharper/introduction.htm';
					   this.page.identifier = '../src/vnext/catel-resharper/introduction.md';
					   };
					   (function() { // DON'T EDIT BELOW THIS LINE
					   var d = document, s = d.createElement('script');
					   s.src = 'https://catel-docs.disqus.com/embed.js';
					   s.setAttribute('data-timestamp', +new Date());
					   (d.head || d.body).appendChild(s);
					   })();
					   </script>
					   <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
					  </p>
					</div>
                </footer>
            </div>
        </section>
    </div>
    <script src="../js/jquery-2.1.1.min.js"></script>
    <script src="../js/modernizr-2.8.3.min.js"></script>
    <script src="../js/highlight.pack.js"></script>
    <script src="../js/theme.js"></script>

    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
    
      ga('create', 'UA-25600919-4', 'auto');
      ga('send', 'pageview');
    
    </script>
</body>
</html>
