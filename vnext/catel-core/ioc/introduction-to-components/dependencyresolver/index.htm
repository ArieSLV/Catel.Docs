<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>DependencyResolver & DependencyResolverManager - Catel documentation</title>
    <link rel="shortcut icon" href="../../../../favicon.ico">
    <link rel="stylesheet" href="../../../../css/theme.css" type="text/css" />
    <link rel="stylesheet" href="../../../../css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="../../../../css/styles/vs.css">
    <link rel="stylesheet" href="../../../../css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="/welcome/index.htm"><i class="fa fa-home"></i> Catel documentation</a>
                <div role="search">
                    <form id="search-form" class="form" action="../../../../Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="../../../../Home.htm">Home</a>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../introduction/">Introduction</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../faq/">FAQ</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../setup-deployment/">Setup, deployment & projects</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../getting-started/">Getting started</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../examples/">Examples</a></span>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../../../../catel-core/">Catel.Core</a></span></li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../catel-core/apicop/">ApiCop</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../catel-core/argument-checking/">Argument checking</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../catel-core/caching/">Caching</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../catel-core/configuration/">Configuration</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../catel-core/data-handling/">Data handling</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../catel-core/exception-handling/">Exception handling</a></span>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../../../../catel-core/ioc/">IoC (ServiceLocator & TypeFactory)</a></span></li>
<li class="tocentry"><a href="../../../../catel-core/ioc/introduction/">Introduction</a>
</li>
<li class="tocentry"><a href="../../../../catel-core/ioc/dependency-injection/">Dependency injection</a>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../../../../catel-core/ioc/introduction-to-components/">Introduction to IoC components</a></span></li>
<li class="tocentry"><a href="../../../../catel-core/ioc/introduction-to-components/servicelocator/">ServiceLocator</a>
</li>
<li class="tocentry"><a href="../../../../catel-core/ioc/introduction-to-components/typefactory/">TypeFactory</a>
</li>
<li class="tocentry current"><a class="current" href="../../../../catel-core/ioc/introduction-to-components/dependencyresolver/">DependencyResolver & DependencyResolverManager</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#why-the-need-for-a-dependencyresolver">Why the need for a DependencyResolver</a></li>
<li class="tocentry"><a href="#managing-the-dependency-resolvers-per-instance">Managing the dependency resolvers per instance</a></li>
<li class="tocentry"><a href="#managing-the-dependency-resolvers-per-type">Managing the dependency resolvers per type</a></li>
<li class="tocentry"><a href="#customizing-the-default-dependencyresolver">Customizing the default DependencyResolver</a></li>
<li class="tocentry"><a href="#customizing-the-dependencyresolvermanager">Customizing the DependencyResolverManager</a></li>
</ul>
<li class="tocentry"><a href="../../../../catel-core/ioc/introduction-to-components/ensuring-integrity/">Ensuring integrity of the ServiceLocator</a>
</li>

</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../catel-core/ioc/automatic-type-registration/">Automatic type registration</a></span>
</li>
<li class="tocentry"><a href="../../../../catel-core/ioc/setting-up-using-configuration/">Setting up the ServiceLocator using configuration</a>
</li>
<li class="tocentry"><a href="../../../../catel-core/ioc/replacing-default-components/">Replacing the default components</a>
</li>

</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../catel-core/logging/">Logging</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../catel-core/messaging/">Messaging</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../catel-core/multilingual/">Multilingual</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../catel-core/parallel-invocation-tasks/">Parallel invocation & tasks</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../catel-core/pooling/">Pooling</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../catel-core/preventing-memory-leaks/">Preventing memory leaks</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../catel-core/reflection/">Reflection</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../catel-core/scoping/">Scoping</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../catel-core/serialization/">Serialization</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../catel-core/validation/">Validation</a></span>
</li>

</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../catel-mvvm/">Catel.MVVM</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../catel-fody/">Catel.Fody</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../catel-resharper/">Catel.ReSharper</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../tips-tricks/">Tips & tricks</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../../reference/">API reference</a></span>
</li>

</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="../../../../index.htm">Catel documentation</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="../../../../Home.htm">Home</a></li> / <li><a href="../../../../catel-core/index.htm">Catel.Core</a></li> / <li><a href="../../../../catel-core/ioc/index.htm">IoC (ServiceLocator & TypeFactory)</a></li> / <li><a href="../../../../catel-core/ioc/introduction-to-components/index.htm">Introduction to IoC components</a></li> / <li><a href="../../../../catel-core/ioc/introduction-to-components/dependencyresolver/index.htm">DependencyResolver & DependencyResolverManager</a></li></ul>

                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="introduction-to-dependencyresolver-and-dependencyresolvermanager">Introduction to DependencyResolver and DependencyResolverManager<a class="headerlink" href="#introduction-to-dependencyresolver-and-dependencyresolvermanager" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>Managing different scoping of service locators and dependency injection can be hard. To aid developers with this, theÂ <code>IDependencyResolver</code> andÂ <code>DependencyResolverManager</code> are introduced.</p>
<h2 id="why-the-need-for-a-dependencyresolver">Why the need for a DependencyResolver<a class="headerlink" href="#why-the-need-for-a-dependencyresolver" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>That's a good question. Catel already provides theÂ <code>IServiceLocator</code> which allows to resolve types. The downside is that if you want to customize the way dependencies are resolved in Catel, you will have to implement a custom version of theÂ <code>ServiceLocator</code>. To make it simple to customize this behavior,<code></code>theÂ <code>DependencyResolver</code> is introduced.</p>
<div class="alert alert-info"><span class="alert-title"><i class="fa fa-info-circle"></i> Info</span><p>The main strategy will be to use the <code>DependencyResolver</code> instead of <code>ServiceLocator</code> to resolve the types in Catel, starting with version 3.8</p>
</div><p>Though in simple situations, Catel will resolve and inject all types automatically, there are a few exceptions to the rule. One of these exceptions are extension methods. These are static classes which can be used to add functionality to an object. The downside is that you cannot use dependency injection in static classes, and each object that is extended can have their own scoping of dependency resolvers. To solve this issue, Catel introduces theÂ <code>DependencyResolverManager</code>. This is a manager that keeps track of all types and objects and theÂ <code>DependencyResolver</code> that were used to create the object. This way it is still possible to retrieve additional dependencies in extensions methods in theÂ <code>same</code>Â dependency resolver the type was created with.</p>
<p>To illustrate this issue, take a look at the view model below:</p>
<pre class="nocode">// Set up a different scoping with a custom service locator
var serviceLocator = new ServiceLocator();
// ... register custom services here
var typeFactory = serviceLocator.ResolveType&lt;ITypeFactory&gt;();
Â 
var vm = typeFactory.CreateInstance&lt;MyViewModel&gt;();
</pre><p>In this example, a view model is created with a custom dependency scope. When writing an extension method for the view models, it is impossible to get to this custom scope:</p>
<pre class="nocode">public static class MyViewModelExtensions
{
    public static void DoSomething(this MyViewModel myViewModel)
    {
         // You can use ServiceLocator.Default here, but that is a `different and wrong` scope
         var additionalDependency = ServiceLocator.Default.ResolveType&lt;IAdditionalDependency&gt;();
    }
}
</pre><p>One option to solve this is to create a property on the view model calledÂ <code>DependencyResolver</code> orÂ <code>ServiceLocator</code>. However, it isÂ <code>not</code> the responsibility of the view model to store this property. In fact, the view model does not know which scoping was used to create itself. The only way to solve this is to inject theÂ <code>IServiceLocator</code> into the view model, but that's not a good practice.</p>
<p>Below is a rewritten version of the extensions class which uses theÂ <code>DependencyResolverManager</code>:</p>
<pre class="nocode">public static class MyViewModelExtensions
{
    public static void DoSomething(this MyViewModel myViewModel)
    {
         // Get the `right` scope
         var dependencyResolverManager = DependencyResolverManager.Default;
         var dependencyResolver = dependencyResolverManager.GetDependencyResolverForInstance(myViewModel);
         var additionalDependency = dependencyResolver.Resolve&lt;IAdditionalDependency&gt;();
    }
}
</pre><p>Now you have the actualÂ <code>IDependencyResolver</code> that was use to create the view model and can easily provide the right logic with the right scoping.</p>
<div class="alert alert-info"><span class="alert-title"><i class="fa fa-info-circle"></i> Info</span><p>Note that there will only be a single instance of a <code>DependencyResolverManager</code>. It is possible to customize the default instance, but there is no need for different scoping of <code>DependencyResolverManager</code> instances so it is valid to use the static instance</p>
</div><h2 id="managing-the-dependency-resolvers-per-instance">Managing the dependency resolvers per instance<a class="headerlink" href="#managing-the-dependency-resolvers-per-instance" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>TheÂ <code>DependencyResolverManager</code> can manage dependency resolvers per instance. This way it is possible to retrieve the actual dependency resolver for a specific object instance.</p>
<h3 id="registering-a-dependency-resolver-for-an-instance">Registering a dependency resolver for an instance<a class="headerlink" href="#registering-a-dependency-resolver-for-an-instance" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>To register a dependency resolver for an instance, use this code:</p>
<pre class="nocode">var serviceLocator = new ServiceLocator();
var dependencyResolver = new CatelDependencyResolver(serviceLocator);
var myObject = new MySpecialObject();
Â 
var dependencyResolverManager = DependencyResolverManager.Default;
dependencyResolverManager.RegisterDependencyResolverForInstance(myObject, dependencyResolver);
</pre><div class="alert alert-warning"><span class="alert-title"><i class="fa fa-warning"></i> Important!</span><p>Note that it is not required to register a <code>DependencyResolver</code> for instances created with the <code>TypeFactory</code>. The <code>TypeFactory</code> automatically registers the <code>DependencyResolver</code> used in the <code>DependencyResolverManager</code>.</p>
</div><h3 id="retrieving-a-dependency-resolver-for-an-instance">Retrieving a dependency resolver for an instance<a class="headerlink" href="#retrieving-a-dependency-resolver-for-an-instance" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>To retrieve the dependency resolver for a specific instance, use this code:</p>
<pre class="nocode">var dependencyResolverManager = DependencyResolverManager.Default;
var dependencyResolver = dependencyResolverManager.GetDependencyResolverForInstance(myObject);
</pre><p>Below is a graph that shows how the dependency resolver of an instance is determined:</p>
<p><img src="../../../../images/catel-core/ioc/introduction-to-components/dependencyresolver/flow.png" width="1200" height="260" /></p>
<h2 id="managing-the-dependency-resolvers-per-type">Managing the dependency resolvers per type<a class="headerlink" href="#managing-the-dependency-resolvers-per-type" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>TheÂ <code>DependencyResolverManager</code>Â can manage dependency resolvers per type. This way it is possible to retrieve the actual dependency resolver for a specific type.</p>
<h3 id="registering-a-dependency-resolver-for-a-type">Registering a dependency resolver for a type<a class="headerlink" href="#registering-a-dependency-resolver-for-a-type" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>To register a dependency resolver for a type, use this code:</p>
<pre class="nocode">var serviceLocator = new ServiceLocator();
var dependencyResolver = new CatelDependencyResolver(serviceLocator);
Â 
var dependencyResolverManager = DependencyResolverManager.Default;
dependencyResolverManager.RegisterDependencyResolverForType(typeof(MyClass), dependencyResolver);
</pre><div class="alert alert-warning"><span class="alert-title"><i class="fa fa-warning"></i> Important!</span><p>Note that these registrations are type-specific. You cannot register an interface and all classes deriving from that interface will return the same <code>DependencyResolver</code>. All actual types must be registered separately.</p>
</div><h3 id="retrieving-a-dependency-resolver-for-a-type">Retrieving a dependency resolver for a type<a class="headerlink" href="#retrieving-a-dependency-resolver-for-a-type" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>To retrieve the dependency resolver for a specific instance, use this code:</p>
<pre class="nocode">var dependencyResolverManager = DependencyResolverManager.Default;
var dependencyResolver = dependencyResolverManager.GetDependencyResolverForType(typeof(MyClass));
</pre><h2 id="customizing-the-default-dependencyresolver">Customizing the default DependencyResolver<a class="headerlink" href="#customizing-the-default-dependencyresolver" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>By default, theÂ <code>DependencyResolverManager</code> creates aÂ <code>CatelDependencyResolver</code> that wraps theÂ <code>ServiceLocator.Default</code> instance. In simple applications this is sufficient to get everything working. However sometimes it might be needed to customize the<code></code>default <code>DependencyResolver</code>. To change the default one, use the code below:</p>
<pre class="nocode">var dependencyResolverManager = DependencyResolverManager.Default;
dependencyResolverManager.DefaultDependencyResolver = new MyCustomDependencyResolver();
</pre><h2 id="customizing-the-dependencyresolvermanager">Customizing the DependencyResolverManager<a class="headerlink" href="#customizing-the-dependencyresolvermanager" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Customizing theÂ <code>DependencyResolverManager</code> is not recommended. If you still want to do this for whatever reason, create a class implementing theÂ <code>IDependencyResolverManager</code> or derive from theÂ <code>DependencyResolverManager</code>:</p>
<pre class="nocode">public class CustomizedDependencyResolverManager : DependencyResolverManager
{
    public override IDependencyResolver GetDependencyResolverForType(Type type)
    {
        if (type == typeof(MySpecialClass))
        {
            return new MySpecialDependencyResolver();
        }
Â 
        return base.GetDependencyResolverForType(type);
    }
}
</pre><div class="alert alert-info"><span class="alert-title"><i class="fa fa-info-circle"></i> Info</span><p>Note that there is no use to override the <code>DependencyResolverManager</code> as the example, but this keeps it easy to understand</p>
</div><p>Then set the <code>DependencyResolverManager.Default</code>static property:</p>
<pre class="nocode">DependencyResolverManager.Default = new CustomizedDependencyResolverManager();
</pre>
                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">

                      <p>
					    Is this section not up-to-date or found an issue? Please <a href="https://github.com/Catel/Catel.Docs/blob/master/src/../src/vnext/catel-core/ioc/introduction-to-components/dependencyresolver.md" target="_blank">contribute</a>!
					  </p>
					  <p>
					    Have a question about Catel? Use <a href="https://stackoverflow.com/questions/tagged/catel" target="_blank">StackOverflow</a> with the <i>Catel</i> tag!
					  </p>
					  <hr />
					  <p>
					    <h2>Discussion</h2>
					   <div id="disqus_thread"></div>
					   <script>
					   var disqus_config = function () {
					   this.page.url = 'http://docs.catelproject.com/catel-core/ioc/introduction-to-components/dependencyresolver/index.htm';
					   this.page.identifier = '../src/vnext/catel-core/ioc/introduction-to-components/dependencyresolver.md';
					   };
					   (function() { // DON'T EDIT BELOW THIS LINE
					   var d = document, s = d.createElement('script');
					   s.src = 'https://catel-docs.disqus.com/embed.js';
					   s.setAttribute('data-timestamp', +new Date());
					   (d.head || d.body).appendChild(s);
					   })();
					   </script>
					   <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
					  </p>
					</div>
                </footer>
            </div>
        </section>
    </div>
    <script src="../../../../js/jquery-2.1.1.min.js"></script>
    <script src="../../../../js/modernizr-2.8.3.min.js"></script>
    <script src="../../../../js/highlight.pack.js"></script>
    <script src="../../../../js/theme.js"></script>

    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
    
      ga('create', 'UA-25600919-4', 'auto');
      ga('send', 'pageview');
    
    </script>
</body>
</html>
