<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Validation via IValidator - Catel documentation</title>
    <link rel="shortcut icon" href="../../favicon.ico">
    <link rel="stylesheet" href="../../css/theme.css" type="text/css" />
    <link rel="stylesheet" href="../../css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="../../css/styles/vs.css">
    <link rel="stylesheet" href="../../css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="/"><i class="fa fa-home"></i> Catel documentation</a>
                <div role="search">
                    <form id="search-form" class="form" action="../../Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="../../Home.htm">Home</a>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Introduction.htm">Introduction</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../FAQ.htm">FAQ</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Setup,deployment&projects.htm">Setup, deployment & projects</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Gettingstarted.htm">Getting started</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Examples.htm">Examples</a></span>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../../CatelCore.htm">Catel.Core</a></span></li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../ApiCop.htm">ApiCop</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Argumentchecking.htm">Argument checking</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Caching.htm">Caching</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Configuration.htm">Configuration</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Datahandling.htm">Data handling</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Exceptionhandling.htm">Exception handling</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../IoC(ServiceLocator&TypeFactory).htm">IoC (ServiceLocator & TypeFactory)</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Logging.htm">Logging</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Messaging.htm">Messaging</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Multilingual.htm">Multilingual</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Parallelinvocation&tasks.htm">Parallel invocation & tasks</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Pooling.htm">Pooling</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Preventingmemoryleaks.htm">Preventing memory leaks</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Reflection.htm">Reflection</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Scoping.htm">Scoping</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Serialization.htm">Serialization</a></span>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../../Validation.htm">Validation</a></span></li>
<li class="tocentry"><a href="../../catel-core/validation/introduction.htm">Introduction</a>
</li>
<li class="tocentry"><a href="../../catel-core/validation/validation-via-validate-method.htm">Validation via validate methods</a>
</li>
<li class="tocentry"><a href="../../catel-core/validation/validation-via-data-annotations.htm">Validation via data annotations</a>
</li>
<li class="tocentry"><a href="../../catel-core/validation/validation-via-special-model-validators.htm">Validation via special model validators</a>
</li>
<li class="tocentry current"><a class="current" href="../../catel-core/validation/validation-via-ivalidator.htm">Validation via IValidator</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#implementing-the-ivalidatorprovider">Implementing the IValidatorProvider</a></li>
<li class="tocentry"><a href="#implementing-the-ivalidator">Implementing the IValidator</a></li>
<li class="tocentry"><a href="#setting-the-validator-in-modelbase">Setting the validator in ModelBase</a></li>
<li class="tocentry"><a href="#setting-the-validator-in-viewmodelbase">Setting the validator in ViewModelBase</a></li>
</ul>
<li class="tocentry"><a href="../../catel-core/validation/using-validation-context.htm">Using the validation context</a>
</li>
<li class="tocentry"><a href="../../catel-core/validation/getting-summary-of-validation-results.htm">Getting a summary of validation results</a>
</li>
<li class="tocentry"><a href="../../catel-core/validation/deferring-validation.htm">Deferring validation</a>
</li>

</ul>
</li>

</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../CatelMVVM.htm">Catel.MVVM</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../CatelFody.htm">Catel.Fody</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../tips-tricks/index.htm">Tips & tricks</a></span>
</li>

</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="../../index.htm">Catel documentation</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="../../Home.htm">Home</a></li> / <li><a href="../../CatelCore.htm">Catel.Core</a></li> / <li><a href="../../Validation.htm">Validation</a></li> / <li><a href="../../catel-core/validation/validation-via-ivalidator.htm">Validation via IValidator</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="validation-via-ivalidator">Validation via IValidator<a class="headerlink" href="#validation-via-ivalidator" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<div class="alert alert-info"><span class="alert-title"><i class="fa fa-info-circle"></i> Info</span><p>The ViewModelBase derives from ModelBase, thus all information here also applies to the ViewModelBase</p>
</div><p>The validation in Catel is extremely flexible, but sometimes it is just not enough or you are forced to use external validators. For such cases, Catel provides the IValidatorProvider and IValidator interfaces. These allow very flexible injection or external validators into data objects and view models of Catel.</p>
<h2 id="implementing-the-ivalidatorprovider">Implementing the IValidatorProvider<a class="headerlink" href="#implementing-the-ivalidatorprovider" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>The IValidatorProvider is responsible to return the right IValidator for a specific type. There is a convenience implementation named ValidatorProviderBase which only requires the implementation of one single method. Below is an example of an implementation of the IValidatorProvider.</p>
<pre class="nocode">public class ValidatorProvider : ValidatorProviderBase
{
    /// &lt;summary&gt;
    /// Gets a validator for the specified target type.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;targetType&quot;&gt;The target type.&lt;/param&gt;
    /// &lt;returns&gt;
    /// The &lt;see cref=&quot;T:Catel.Data.IValidator&quot;/&gt; for the specified type or &lt;c&gt;null&lt;/c&gt; if no validator is available for the specified type.
    /// &lt;/returns&gt;
    /// &lt;exception cref=&quot;T:System.ArgumentNullException&quot;&gt;The &lt;paramref name=&quot;targetType&quot;/&gt; is &lt;c&gt;null&lt;/c&gt;.&lt;/exception&gt;
    public override IValidator GetValidator(Type targetType)
    {
        if (targetType == typeof(ValidationInIValidatorViewModel))
        {
            return new Validator();
        }

        // No validator available for other types
        return null;
    }
}
</pre><h2 id="implementing-the-ivalidator">Implementing the IValidator<a class="headerlink" href="#implementing-the-ivalidator" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>The IValidator exposes lots of methods to gain the as much freedom as possible. However, most of the methods that are exposed by the interface are hardly used. Therefore there is a convenience base class named ValidatorBase. To create a basic validator, derive from the class and override the methods required for validation.</p>
<pre class="nocode">public class Validator : ValidatorBase&lt;TargetClass&gt;
{
    /// &lt;summary&gt;
    /// Validates the fields of the specified instance. The results must be added to the list of validation
    /// results.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;instance&quot;&gt;The instance to validate.&lt;/param&gt;
    /// &lt;param name=&quot;validationResults&quot;&gt;The validation results.&lt;/param&gt;
    /// &lt;exception cref=&quot;T:System.ArgumentNullException&quot;&gt;The &lt;paramref name=&quot;instance&quot;/&gt; is &lt;c&gt;null&lt;/c&gt;.&lt;/exception&gt;
    /// &lt;exception cref=&quot;T:System.ArgumentNullException&quot;&gt;The &lt;paramref name=&quot;validationResults&quot;/&gt; is &lt;c&gt;null&lt;/c&gt;.&lt;/exception&gt;
    public override void ValidateFields(TargetClass instance, List&lt;IFieldValidationResult&gt; validationResults)
    {
        if (string.IsNullOrEmpty(instance.FirstName))
        {
            validationResults.Add(FieldValidationResult.CreateError(TargetClass.FirstNameProperty, &quot;First name cannot be empty&quot;));
        }

        if (string.IsNullOrEmpty(instance.LastName))
        {
            validationResults.Add(FieldValidationResult.CreateError(TargetClass.LastNameProperty, &quot;Last name cannot be empty&quot;));
        }
    }

    /// &lt;summary&gt;
    /// Validates the business rules of the specified instance. The results must be added to the list of validation
    /// results.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;instance&quot;&gt;The instance to validate.&lt;/param&gt;
    /// &lt;param name=&quot;validationResults&quot;&gt;The validation results.&lt;/param&gt;
    /// &lt;exception cref=&quot;T:System.ArgumentNullException&quot;&gt;The &lt;paramref name=&quot;instance&quot;/&gt; is &lt;c&gt;null&lt;/c&gt;.&lt;/exception&gt;
    /// &lt;exception cref=&quot;T:System.ArgumentNullException&quot;&gt;The &lt;paramref name=&quot;validationResults&quot;/&gt; is &lt;c&gt;null&lt;/c&gt;.&lt;/exception&gt;
    public override void ValidateBusinessRules(TargetClass instance, List&lt;IBusinessRuleValidationResult&gt; validationResults)
    {
        // No business rules (yet)
    }
}
</pre><h2 id="setting-the-validator-in-modelbase">Setting the validator in ModelBase<a class="headerlink" href="#setting-the-validator-in-modelbase" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>To register an IValidator instance on a ModelBase, use the following code:</p>
<pre class="nocode">var modelValidation = myModel as IModelValidation;
if (modelValidation != null)
{
    modelValidation .Validator = new MyValidator();
}
</pre><p>If an IValidatorProvider instance is available, the following code can be used to allow a more generic approach. This code assumes that the IValidatorProvider is registered in the ServiceLocator.</p>
<pre class="nocode">var validatorProvider = ServiceLocator.Instance.ResolveType&lt;IValidatorProvider&gt;();
myObject.Validator = validatorProvider.GetValidator(myObject.GetType());
</pre><p>If the IValidatorProvider returns null (which is allowed), no custom validator will be used.</p>
<h2 id="setting-the-validator-in-viewmodelbase">Setting the validator in ViewModelBase<a class="headerlink" href="#setting-the-validator-in-viewmodelbase" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>The ViewModelBase has it's own ServiceLocator. The easiest way to support a validator is to register an IValidatorProvider instance in the ServiceLocator:</p>
<pre class="nocode">ServiceLocator.Instance.RegisterType&lt;IValidatorProvider, MyValidatorProvider&gt;();
</pre><p>The ViewModelBase will automatically retrieve the right IValidator for the view model. If no IValidatorProvider is registered in the ServiceLocator, no validator will be set automatically. It is also possible to set the Validator property manually, but it is recommended to use an IValidatorProvider and register it.</p>

                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">

                      <p>Is this section not up-to-date or found an issue? Please <a href="https://github.com/Catel/catel.github.io/blob/master/src/../src/vnext/catel-core/validation/validation-via-ivalidator.md" target="_blank">contribute</a>!</p>
                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="../../js/jquery-2.1.1.min.js"></script>
    <script src="../../js/modernizr-2.8.3.min.js"></script>
    <script src="../../js/highlight.pack.js"></script>
    <script src="../../js/theme.js"></script>

    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
    
      ga('create', 'UA-25600919-4', 'auto');
      ga('send', 'pageview');
    
    </script>
</body>
</html>
