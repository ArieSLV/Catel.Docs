<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Thread safe code - Catel documentation</title>
    <link rel="shortcut icon" href="../../favicon.ico">
    <link rel="stylesheet" href="../../css/theme.css" type="text/css" />
    <link rel="stylesheet" href="../../css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="../../css/styles/vs.css">
    <link rel="stylesheet" href="../../css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="../../index.htm"><i class="fa fa-home"></i> Catel documentation</a>
                <div role="search">
                    <form id="search-form" class="form" action="../../Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="../../Home.htm">Home</a>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Introduction.htm">Introduction</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../FAQ.htm">FAQ</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Setup,deployment&projects.htm">Setup, deployment & projects</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Gettingstarted.htm">Getting started</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Examples.htm">Examples</a></span>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../../CatelCore.htm">Catel.Core</a></span></li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../ApiCop.htm">ApiCop</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../catel-core/argument-checking/index.htm">Argument checking</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../catel-core/caching/index.htm">Caching</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../catel-core/configuration/index.htm">Configuration</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Datahandling.htm">Data handling</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Exceptionhandling.htm">Exception handling</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../IoC(ServiceLocator&TypeFactory).htm">IoC (ServiceLocator & TypeFactory)</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Logging.htm">Logging</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Messaging.htm">Messaging</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Multilingual.htm">Multilingual</a></span>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../../Parallelinvocation&tasks.htm">Parallel invocation & tasks</a></span></li>
<li class="tocentry"><a href="../../catel-core/parallel-invocation-tasks/introduction.htm">Introduction</a>
</li>
<li class="tocentry current"><a class="current" href="../../catel-core/parallel-invocation-tasks/thread-safe-code.htm">Thread safe code</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#background-information">Background information</a></li>
<li class="tocentry"><a href="#acquiring-a-lock"> Acquiring a lock</a></li>
<li class="tocentry"><a href="#automatic-locking-of-a-method"> Automatic locking of a method</a></li>
</ul>

</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Pooling.htm">Pooling</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Preventingmemoryleaks.htm">Preventing memory leaks</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Reflection.htm">Reflection</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Scoping.htm">Scoping</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Serialization.htm">Serialization</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Validation.htm">Validation</a></span>
</li>

</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../CatelMVVM.htm">Catel.MVVM</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../tips-tricks/index.htm">Tips & tricks</a></span>
</li>

</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="../../index.htm">Catel documentation</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="../../Home.htm">Home</a></li> / <li><a href="../../CatelCore.htm">Catel.Core</a></li> / <li><a href="../../Parallelinvocation&tasks.htm">Parallel invocation & tasks</a></li> / <li><a href="../../catel-core/parallel-invocation-tasks/thread-safe-code.htm">Thread safe code</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="thread-safe-code">Thread safe code<a class="headerlink" href="#thread-safe-code" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>Writing a multiple threading application is always a challenge. Eventually you need use objects or statements with the ability to synchronize access to the critical sections of the code by taking and releasing a lock.</p>
<h2 id="background-information">Background information<a class="headerlink" href="#background-information" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>The common solution to access the thread-sensitive resources is use the lock statement just as follow:</p>
<pre class="nocode">{.java data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot; style=&quot;brush: java; gutter: false; theme: Confluence&quot;}
private readonly object _syncObj = new object();

public void DoTheWork()
{
    lock (_syncObj)
    {
        // Access to the thread-sensitive resources here.
    }
}
</pre><p> </p>
<p>But some times the scenario is not quite simple, then you need to use the Monitor class in order to synchronize cross method operations. Here is an example: </p>
<pre class="nocode">{.java data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot; style=&quot;brush: java; gutter: false; theme: Confluence&quot;}
private readonly object _syncObj = new object();

public void DoTheWork()
{
    StartTheWork();
    object result = EndTheWork(); 
}

private void StartTheWork()
{
    Monitor.Enter(_syncObj);

    try
    {
        // Access to the thread-sensitive resources here.
    }
    catch(Exception)
    {
        Monitor.Exit(_syncObj);
        throw;
    }
}

private object EndTheWork()
{
    try
    {
        // Access to the thread-sensitive resources here.
        return new object();
    }
    finally
    {
        Monitor.Exit(_syncObj);
    } 
}
</pre><p>To combine the power of the simplicity of the lock statement syntax and the flexibility of the Monitor class, Catel introduces the SynchronizationContext class, allowing you to write the code like this.</p>
<pre class="nocode">{.java data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot; style=&quot;brush: java; gutter: false; theme: Confluence&quot;}
private readonly List&lt;IValidator&gt; _validators = new List&lt;IValidator&gt;(); 
private readonly SynchronizationContext _synchronizationContext = new SynchronizationContext();

public bool Contains(IValidator validator)
{
    Argument.IsNotNull(&quot;validator&quot;, validator);

    return _synchronizationContext.Execute(() =&gt; _validators.Contains(validator));
}

public void Remove(IValidator validator)
{
    Argument.IsNotNull(&quot;validator&quot;, validator);

    _synchronizationContext.Execute(() =&gt; _validators.Remove(validator));
}

public void BeforeValidation(object instance, List&lt;IFieldValidationResult&gt; previousFieldValidationResults, List&lt;IBusinessRuleValidationResult&gt; previousBusinessRuleValidationResults)
{
    _synchronizationContext.Acquire();

    try
    {
        foreach (IValidator validator in _validators)
        {
            validator.BeforeValidation(instance, previousFieldValidationResults, previousBusinessRuleValidationResults);
        }
    }
    catch (Exception)
    {
        _synchronizationContext.Release(); 
        throw;
    }
}

public void AfterValidateBusinessRules(object instance, List&lt;IBusinessRuleValidationResult&gt; validationResults)
{
    try
    {
        foreach (IValidator validator in _validators)
        {
            validator.AfterValidateBusinessRules(instance, validationResults);
        }
    }
    catch (Exception)
    {
        _synchronizationContext.Release();
        throw;
    }
}
</pre><p>SynchronizationContext also allow you create asynchronous locking request, that could be useful in Silverlight Application where the action of lock the main thread is not allowed. </p>
<h2 id="acquiring-a-lock"> Acquiring a lock<a class="headerlink" href="#acquiring-a-lock" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>To acquire a lock, only a call to Acquire is required:</p>
<pre class="nocode">{.java data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot; style=&quot;brush: java; gutter: false; theme: Confluence&quot;}
_synchronizationContext.Acquire();
</pre><p>Releasing a lock</p>
<p> To release a lock, only a call to Release is required:</p>
<pre class="nocode">{.java data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot; style=&quot;brush: java; gutter: false; theme: Confluence&quot;}
_synchronizationContext.Release();
</pre><h2 id="automatic-locking-of-a-method"> Automatic locking of a method<a class="headerlink" href="#automatic-locking-of-a-method" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>It is also possible to automatically lock and release a method call. This can be accomplished using the Execute method.</p>
<pre class="nocode">{.java data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot; style=&quot;brush: java; gutter: false; theme: Confluence&quot;}
_synchronizationContext.Execute(() =&gt; ThreadSafeCodeExecution());
</pre>
                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">

                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="../../js/jquery-2.1.1.min.js"></script>
    <script src="../../js/modernizr-2.8.3.min.js"></script>
    <script src="../../js/highlight.pack.js"></script>
    <script src="../../js/theme.js"></script>

</body>
</html>
