<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>ViewModelLocator - Catel documentation</title>
    <link rel="shortcut icon" href="../../../favicon.ico">
    <link rel="stylesheet" href="../../../css/theme.css" type="text/css" />
    <link rel="stylesheet" href="../../../css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="../../../css/styles/vs.css">
    <link rel="stylesheet" href="../../../css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="../../../index.htm"><i class="fa fa-home"></i> Catel documentation</a>
                <div role="search">
                    <form id="search-form" class="form" action="../../../Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="../../../Home.htm">Home</a>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../introduction/">Introduction</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../faq/">FAQ</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../setup-deployment/">Setup, deployment & projects</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../getting-started/">Getting started</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../examples/">Examples</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../catel-core/">Catel.Core</a></span>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../../../catel-mvvm/">Catel.MVVM</a></span></li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../catel-mvvm/auditing/">Auditing</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../catel-mvvm/behaviors-triggers/">Behaviors & triggers</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../catel-mvvm/bindings/">Bindings</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../catel-mvvm/commands-events/">Commands & events</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../catel-mvvm/converters/">Converters</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../catel-mvvm/designers/">Designers</a></span>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../../../catel-mvvm/locators-naming-conventions/">Locators & naming conventions</a></span></li>
<li class="tocentry current"><a class="current" href="../../../catel-mvvm/locators-naming-conventions/view-model-locator/">ViewModelLocator</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#resolving-by-naming-convention">Resolving by naming convention</a></li>
<li class="tocentry"><a href="#manually-resolving-a-view-model-using-naming-convention">Manually resolving a view model using naming convention</a></li>
<li class="tocentry"><a href="#customizing-naming-conventions">Customizing naming conventions</a></li>
<li class="tocentry"><a href="#registering-custom-view-models">Registering custom view models</a></li>
<li class="tocentry"><a href="#using-a-custom-viewmodellocator">Using a custom ViewModelLocator</a></li>
<li class="tocentry"><a href="#using-a-generic-implementation-of-the-view">Using a generic implementation of the view</a></li>
</ul>
<li class="tocentry"><a href="../../../catel-mvvm/locators-naming-conventions/view-locator/">ViewLocator</a>
</li>
<li class="tocentry"><a href="../../../catel-mvvm/locators-naming-conventions/url-locator/">UrlLocator</a>
</li>
<li class="tocentry"><a href="../../../catel-mvvm/locators-naming-conventions/naming-conventions/">Naming conventions</a>
</li>

</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../catel-mvvm/services/">Services</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../catel-mvvm/view-models/">View models</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../catel-mvvm/views/">Views</a></span>
</li>

</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../catel-fody/">Catel.Fody</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../catel-resharper/">Catel.ReSharper</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../tips-tricks/">Tips & tricks</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../reference/">API reference</a></span>
</li>

</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="../../../index.htm">Catel documentation</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="../../../Home.htm">Home</a></li> / <li><a href="../../../catel-mvvm/index.htm">Catel.MVVM</a></li> / <li><a href="../../../catel-mvvm/locators-naming-conventions/index.htm">Locators & naming conventions</a></li> / <li><a href="../../../catel-mvvm/locators-naming-conventions/view-model-locator/index.htm">ViewModelLocator</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="viewmodellocator">ViewModelLocator<a class="headerlink" href="#viewmodellocator" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>Starting with Catel 3.0, there are several ways to hook up a view model to the view. When a view is constructed, an MVVM behavior is added to the view. Thanks to these MVVM behaviors, it is possible to use exactly the same logic on 3rd party controls.</p>
<div class="alert alert-warning"><span class="alert-title"><i class="fa fa-warning"></i> Important!</span><p>Note that the while using the conventions, magic words such as &quot;View&quot;, &quot;Control&quot;, &quot;UserControl&quot;, &quot;Window&quot; and &quot;Page&quot; will be stripped from the view name while locating the view model type</p>
</div><h2 id="resolving-by-naming-convention">Resolving by naming convention<a class="headerlink" href="#resolving-by-naming-convention" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>If the <code>GetViewModelType</code> method returns <code>null</code> (which is the default behavior), the view will resolve the <code>IViewModelLocator</code> from the <code>ServiceLocator</code>. Then it will use the <code>ResolveViewModel</code> method to resolve the view model based on the type of the view.</p>
<p>For example, the following view:</p>
<pre class="nocode">Catel.Examples.Views.MyView
</pre><p>will be resolved as:</p>
<pre class="nocode">Catel.Examples.ViewModels.MyViewModel
</pre><h2 id="manually-resolving-a-view-model-using-naming-convention">Manually resolving a view model using naming convention<a class="headerlink" href="#manually-resolving-a-view-model-using-naming-convention" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>To manually resolve a view model using naming convention, use the following code:</p>
<pre class="nocode">var viewModelLocator = ServiceLocator.Default.ResolveType&lt;IViewModelLocator&gt;();
var viewModelType = viewModelLocator.ResolveViewModel(typeof(MyView));
</pre><h2 id="customizing-naming-conventions">Customizing naming conventions<a class="headerlink" href="#customizing-naming-conventions" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>By default, the <em>IViewModelLocator</em> uses the following naming conventions to resolve view models:</p>
<ul>
<li>[UP].ViewModels.[VW]ViewModel</li>
<li>[UP].ViewModels.[VW]ControlViewModel</li>
<li>[UP].ViewModels.[VW]WindowViewModel</li>
<li>[UP].ViewModels.[VW]PageViewModel</li>
<li>[UP].ViewModels.[VW]ActivityViewModel</li>
<li>[UP].ViewModels.[VW]FragmentViewModel</li>
<li>[AS].ViewModels.[VW]ViewModel</li>
<li>[AS].ViewModels.[VW]ControlViewModel</li>
<li>[AS].ViewModels.[VW]WindowViewModel</li>
<li>[AS].ViewModels.[VW]PageViewModel</li>
<li>[AS].ViewModels.[VW]ActivityViewModel</li>
<li>[AS].ViewModels.[VW]FragmentViewModel</li>
<li>[CURRENT].[VW]ViewModel</li>
<li>[CURRENT].[VW]ControlViewModel</li>
<li>[CURRENT].[VW]WindowViewModel</li>
<li>[CURRENT].[VW]PageViewModel</li>
<li>[CURRENT].[VW]ActivityViewModel</li>
<li>[CURRENT].[VW]FragmentViewModel</li>
</ul>
<div class="alert alert-info"><span class="alert-title"><i class="fa fa-info-circle"></i> Info</span><p>For more information about naming conventions, see <a href="./naming-conventions.htm">Naming conventions</a></p>
</div><p>However, it is possible to add or remove new naming conventions to support your own naming convention. For example, to add a new naming convention for a different assembly, use this code:</p>
<pre class="nocode">var viewModelLocator = ServiceLocator.Default.ResolveType&lt;IViewModelLocator&gt;();
viewModelLocator.NamingConventions.Add(&quot;MyCustomAssembly.ViewModels.[VW]ViewModel&quot;);
</pre><h2 id="registering-custom-view-models">Registering custom view models<a class="headerlink" href="#registering-custom-view-models" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Sometimes, a class doesn't follow a naming convention (for whatever reason possible). In such a case, it is possible to register a mapping manually using the following code:</p>
<pre class="nocode">var viewModelLocator = ServiceLocator.Default.ResolveType&lt;IViewModelLocator&gt;();
viewModelLocator.Register(typeof(MyViewNotFollowingNamingConvention), typeof(MyViewModel));
</pre><h2 id="using-a-custom-viewmodellocator">Using a custom ViewModelLocator<a class="headerlink" href="#using-a-custom-viewmodellocator" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>If you want to have total freedom to determine which view model is provided per view (maybe there are other services that have an impact on this), it is possible to create a custom <code>IViewModelLocator</code> implementation. Then the only thing to do is to register it using the following code:</p>
<pre class="nocode">ServiceLocator.Default.Register&lt;IViewModelLocator, MyViewModelLocator&gt;();
</pre><h2 id="using-a-generic-implementation-of-the-view">Using a generic implementation of the view<a class="headerlink" href="#using-a-generic-implementation-of-the-view" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Last but not least, it is still possible to use the &quot;old-fashioned&quot; way by using the generic view bases. These classes directly derive from the non-generic views and return the generic type definition of the view model using the <code>GetViewModelType</code> method.</p>

                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">

                      <p>Is this section not up-to-date or found an issue? Please <a href="https://github.com/Catel/catel.github.io/blob/master/src/../src/vnext/catel-mvvm/locators-naming-conventions/view-model-locator.md" target="_blank">contribute</a>!</p>
                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="../../../js/jquery-2.1.1.min.js"></script>
    <script src="../../../js/modernizr-2.8.3.min.js"></script>
    <script src="../../../js/highlight.pack.js"></script>
    <script src="../../../js/theme.js"></script>

    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
    
      ga('create', 'UA-25600919-4', 'auto');
      ga('send', 'pageview');
    
    </script>
</body>
</html>
