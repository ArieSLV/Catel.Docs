<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Creating a view model that watches over other view models - Catel documentation</title>
    <link rel="shortcut icon" href="../../favicon.ico">
    <link rel="stylesheet" href="../../css/theme.css" type="text/css" />
    <link rel="stylesheet" href="../../css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="../../css/styles/vs.css">
    <link rel="stylesheet" href="../../css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="../../index.htm"><i class="fa fa-home"></i> Catel documentation</a>
                <div role="search">
                    <form id="search-form" class="form" action="../../Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="../../Home.htm">Home</a>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Introduction.htm">Introduction</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../FAQ.htm">FAQ</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Setup,deployment&projects.htm">Setup, deployment & projects</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Gettingstarted.htm">Getting started</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Examples.htm">Examples</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../CatelCore.htm">Catel.Core</a></span>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../../CatelMVVM.htm">Catel.MVVM</a></span></li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Auditing.htm">Auditing</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Behaviors&triggers.htm">Behaviors & triggers</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Bindings.htm">Bindings</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Commands&events.htm">Commands & events</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Converters.htm">Converters</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Designers.htm">Designers</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Locators&namingconventions.htm">Locators & naming conventions</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Services.htm">Services</a></span>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../../Viewmodels.htm">View models</a></span></li>
<li class="tocentry"><a href="../../catel-mvvm/view-models/introduction.htm">Introduction</a>
</li>
<li class="tocentry"><a href="../../catel-mvvm/view-models/creating-basic-view-model.htm">Creating a basic view model</a>
</li>
<li class="tocentry current"><a class="current" href="../../catel-mvvm/view-models/creating-view-model-that-watches-over-other-view-models.htm">Creating a view model that watches over other view models</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#code-snippets">Code snippets</a></li>
<li class="tocentry"><a href="#explanation">Explanation</a></li>
<li class="tocentry"><a href="#code">Code</a></li>
</ul>
<li class="tocentry"><a href="../../catel-mvvm/view-models/creating-view-model-with-model.htm">Creating a view model with a model</a>
</li>
<li class="tocentry"><a href="../../catel-mvvm/view-models/creating-view-model-with-model-and-mappings.htm">Creating a view model with a model and mappings</a>
</li>
<li class="tocentry"><a href="../../catel-mvvm/view-models/mapping-properties-from-view-to-view-model.htm">Mapping properties from view to view model</a>
</li>
<li class="tocentry"><a href="../../catel-mvvm/view-models/nested-view-models.htm">Nested view models</a>
</li>
<li class="tocentry"><a href="../../catel-mvvm/view-models/validation-in-view-models.htm">Validation in view models</a>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Advanced.htm">Advanced</a></span>
</li>

</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Views.htm">Views</a></span>
</li>

</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../tips-tricks/index.htm">Tips & tricks</a></span>
</li>

</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="../../index.htm">Catel documentation</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="../../Home.htm">Home</a></li> / <li><a href="../../CatelMVVM.htm">Catel.MVVM</a></li> / <li><a href="../../Viewmodels.htm">View models</a></li> / <li><a href="../../catel-mvvm/view-models/creating-view-model-that-watches-over-other-view-models.htm">Creating a view model that watches over other view models</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="creating-a-view-model-that-watches-over-other-view-models">Creating a view model that watches over other view models<a class="headerlink" href="#creating-a-view-model-that-watches-over-other-view-models" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>Most frameworks require you to set up complex message systems (messengers) or other techniques to communicate with other view models. The downside of this approach is that once a view model is written in module X, and you are interested in the view model, the developer of module X must take care of notifying other view models. We think this is not the responsibility of the originating view model.</p>
<p>If a view model is interested in the changes of another view model, itâ€™s the responsibility of the view model that is interested to watch the view model, not the other way around. To be notified of changes on other view models, the only thing you have to do is to decorate a view model with the <em>InterestedInAttribute</em>, like shown in the code below:</p>
<pre class="nocode">{.java data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot; style=&quot;brush: java; gutter: false; theme: Confluence&quot;}
[InterestedIn(typeof(FamilyViewModel))]
public class PersonViewModel : ViewModelBase
</pre><p>Then, inside the <em>PersonViewModel</em> (which is interested in the changes of <em>FamilyViewModel</em>), you only have to override the <em>OnViewModelPropertyChanged</em> method:</p>
<pre class="nocode">{.java data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot; style=&quot;brush: java; gutter: false; theme: Confluence&quot;}
/// &lt;summary&gt;
/// Called when a property has changed for a view model type
/// that the current view model is interested in. This can
/// be accomplished by decorating the view model with the &lt;see cref=&quot;InterestedInAttribute&quot;/&gt;.
/// &lt;/summary&gt;
/// &lt;param name=&quot;viewModel&quot;&gt;The view model.&lt;/param&gt;
/// &lt;param name=&quot;propertyName&quot;&gt;Name of the property.&lt;/param&gt;
protected override void OnViewModelPropertyChanged(IViewModel viewModel, string propertyName)
{
    // You can now do something with the changed property
}
</pre><p>It is possible to be interested in multiple view models. Since the view model is passed to the <em>OnViewModelPropertyChanged</em> method, it is very easy to check the type of the view model.</p>
<h2 id="code-snippets">Code snippets<a class="headerlink" href="#code-snippets" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<ul>
<li>vm - declare a view model</li>
<li>vmprop - declare a property on a view model</li>
</ul>
<h2 id="explanation">Explanation<a class="headerlink" href="#explanation" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>The most important thing to know is that there is a <em>ViewModelManager</em> in the library. This manager keeps track of all view models that are alive. A view model automatically registers itself to the manager, and when it is closed, the view model automatically unsubscribes itself again.</p>
<p>By using the <em>InterestedInAttribute</em>, it is possible to receive notifications of other view models. The <em>InterestedInAttribute</em> defines a specific type of view model the decorated view model is interested in. Then, the decorated view model will receive all the <em>PropertyChanged</em> events of the live view models of that specific type. It is possible to define multiple attributes to watch several different types of view models.</p>
<h2 id="code">Code<a class="headerlink" href="#code" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p><strong>Watched view model</strong></p>
<pre class="nocode">{.java data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot; style=&quot;brush: java; gutter: false; theme: Confluence&quot;}
/// &lt;summary&gt;
/// Watched view model.
/// &lt;/summary&gt;
public class WatchedViewModel : ViewModelBase
{
   /// &lt;summary&gt;
   /// Gets the title of the view model.
   /// &lt;/summary&gt;
   /// &lt;value&gt;The title.&lt;/value&gt;
   public override string Title { get { return &quot;View model being watched&quot;; } }

   /// &lt;summary&gt;
   /// Initializes the object by setting default values.
   /// &lt;/summary&gt;   
   protected override void Initialize()
   {
      // Not required
   }
}
</pre><p><strong>Interested view model</strong></p>
<pre class="nocode">{.java data-syntaxhighlighter-params=&quot;brush: java; gutter: false; theme: Confluence&quot; data-theme=&quot;Confluence&quot; style=&quot;brush: java; gutter: false; theme: Confluence&quot;}
/// &lt;summary&gt;
/// Interested view model.
/// &lt;/summary&gt;
[InterestedIn(typeof(WatchedViewModel))]
public class InterestedViewModel : ViewModelBase
{
   /// &lt;summary&gt;
   /// Gets the title of the view model.
   /// &lt;/summary&gt;
   /// &lt;value&gt;The title.&lt;/value&gt;
   public override string Title { get { return &quot;View model that is interested&quot;; } }

   /// &lt;summary&gt;
   /// Initializes the object by setting default values.
   /// &lt;/summary&gt;   
   protected override void Initialize()
   {
      // Not required
   }

   /// &lt;summary&gt;
   /// Called when a property has changed for a view model type that the current view model is interested in. This can
   /// be accomplished by decorating the view model with the &lt;see cref=&quot;InterestedInAttribute&quot;/&gt;.
   /// &lt;/summary&gt;
   /// &lt;param name=&quot;viewModel&quot;&gt;The view model.&lt;/param&gt;
   /// &lt;param name=&quot;propertyName&quot;&gt;Name of the property.&lt;/param&gt;
   protected override void OnViewModelPropertyChanged(IViewModel viewModel, string propertyName)
   {
      // TODO: Check what property was changed
   }

   /// &lt;summary&gt;
   /// Called when a command for a view model type that the current view model is interested in has been executed. This can
   /// be accomplished by decorating the view model with the &lt;see cref=&quot;InterestedInAttribute&quot;/&gt;.
   /// &lt;/summary&gt;
   /// &lt;param name=&quot;viewModel&quot;&gt;The view model.&lt;/param&gt;
   /// &lt;param name=&quot;command&quot;&gt;The command that has been executed.&lt;/param&gt;
   /// &lt;param name=&quot;commandParameter&quot;&gt;The command parameter used during the execution.&lt;/param&gt;
   protected override void OnViewModelCommandExecuted(IViewModel viewModel, ICatelCommand command, object commandParameter)
   {
      // TODO: Check what command has been executed
   }
}
</pre>
                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">

                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="../../js/jquery-2.1.1.min.js"></script>
    <script src="../../js/modernizr-2.8.3.min.js"></script>
    <script src="../../js/highlight.pack.js"></script>
    <script src="../../js/theme.js"></script>

</body>
</html>
