<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Application-wide commands - Catel documentation</title>
    <link rel="shortcut icon" href="../../favicon.ico">
    <link rel="stylesheet" href="../../css/theme.css" type="text/css" />
    <link rel="stylesheet" href="../../css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="../../css/styles/vs.css">
    <link rel="stylesheet" href="../../css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="../../index.htm"><i class="fa fa-home"></i> Catel documentation</a>
                <div role="search">
                    <form id="search-form" class="form" action="../../Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="../../Home.htm">Home</a>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Introduction.htm">Introduction</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../FAQ.htm">FAQ</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Setup,deployment&projects.htm">Setup, deployment & projects</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Gettingstarted.htm">Getting started</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Examples.htm">Examples</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../CatelCore.htm">Catel.Core</a></span>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../../CatelMVVM.htm">Catel.MVVM</a></span></li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Auditing.htm">Auditing</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Behaviors&triggers.htm">Behaviors & triggers</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Bindings.htm">Bindings</a></span>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../../Commands&events.htm">Commands & events</a></span></li>
<li class="tocentry"><a href="../../catel-mvvm/commands-events/introduction.htm">Introduction</a>
</li>
<li class="tocentry"><a href="../../catel-mvvm/commands-events/commands.htm">Commands</a>
</li>
<li class="tocentry current"><a class="current" href="../../catel-mvvm/commands-events/application-wide-commands.htm">Application-wide commands</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#commandmanager">CommandManager</a></li>
<li class="tocentry"><a href="#creating-application-wide-commands">Creating application-wide commands</a></li>
<li class="tocentry"><a href="#command-containers">Command containers</a></li>
</ul>
<li class="tocentry"><a href="../../catel-mvvm/commands-events/asynchronous-commands.htm">Asynchronous commands</a>
</li>
<li class="tocentry"><a href="../../catel-mvvm/commands-events/authentication.htm">Commands authentication</a>
</li>
<li class="tocentry"><a href="../../catel-mvvm/commands-events/hooking-command-to-validation.htm">Hooking a command to validation automatically</a>
</li>

</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Converters.htm">Converters</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Designers.htm">Designers</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Locators&namingconventions.htm">Locators & naming conventions</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Services.htm">Services</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Viewmodels.htm">View models</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../Views.htm">Views</a></span>
</li>

</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../tips-tricks/index.htm">Tips & tricks</a></span>
</li>

</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="../../index.htm">Catel documentation</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="../../Home.htm">Home</a></li> / <li><a href="../../CatelMVVM.htm">Catel.MVVM</a></li> / <li><a href="../../Commands&events.htm">Commands & events</a></li> / <li><a href="../../catel-mvvm/commands-events/application-wide-commands.htm">Application-wide commands</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="commandmanager-and-command-containers-application-wide-commands">CommandManager and command containers (Application-wide commands)<a class="headerlink" href="#commandmanager-and-command-containers-application-wide-commands" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>Most commands are registered per view and available per view model. Some commands (such as commands on a <em>Ribbon</em> or <em>Toolbar</em>) are application-wide. Catel supports both types, and this part of the documentation explains how to use the <em>ICommandManager</em> to work with application-wide commands such as <em>Refresh</em> with a key bound to <em>F5</em>.</p>
<h2 id="commandmanager">CommandManager<a class="headerlink" href="#commandmanager" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>There is no generic way to specify application-wide commands in WPF and Silverlight. To overcome this issue, Catel introduces the <em>CommandManager</em>. This manager allows to create commands which are hosted by the <em>CommandManager</em>. The commands on the command manager can be created with input gestures (on both WPF and Silverlight). Once a view model wants to hook into a specific command, it only has to register the view model command with the application-wide command.</p>
<p>Note that application-wide commands by default are only available on the main window of an application. To support this on other windows, add the following code in the constructor of a window:</p>
<pre class="nocode">public class SomeWindow
{
    private readonly CommandManagerWrapper _commandManagerWrapper;
 
    public SomeWindow()
    {
        InitializeComponent();
 
        _commandManagerWrapper = new CommandManagerWrapper(this);
    }
}
</pre><h2 id="creating-application-wide-commands">Creating application-wide commands<a class="headerlink" href="#creating-application-wide-commands" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>To create application-wide commands, one must resolve the <em>ICommandManager</em> from the *DependencyResolver *and create the command:</p>
<pre class="nocode">var dependencyResolver = IoCConfiguration.DefaultDependencyResolver;
var commandManager = dependencyResolver.Resolve&lt;ICommandManager&gt;();
 
commandManager.CreateCommand(&quot;Refresh&quot;, new InputGesture(Key.F5));
</pre><p>It is recommended to put all the command creation in a single place so they are easily manageable.</p>
<h3 id="registering-a-custom-command">Registering a custom command<a class="headerlink" href="#registering-a-custom-command" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>When a view model wants to use application-wide specific commands, the only thing it has to do is register the command in the <em>CommandManager</em>.</p>
<pre class="nocode">public class CommandSubscribingViewModel : ViewModelBase
{
    private readonly IMessageService _messageService;

    public CommandSubscribingViewModel(ICommandManager commandManager, IMessageService messageService)
    {
        Argument.IsNotNull(() =&gt; commandManager);
        Argument.IsNotNull(() =&gt; messageService);
    
        _messageService = messageService;
    
        ExampleCommand = new Command(OnExampleCommandExecute);
        commandManager.RegisterCommand(&quot;Refresh&quot;, ExampleCommand, this);
    }

    public Command ExampleCommand { get; private set; }

    private void OnExampleCommandExecute()
    {
        _messageService.Show(&quot;Application-wide command executed&quot;);
    }
}
</pre><h3 id="using-application-wide-commands-in-xaml">Using application-wide commands in xaml<a class="headerlink" href="#using-application-wide-commands-in-xaml" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>To make it easy to bind to application-wide commands, Catel provides the *CommandManagerBinding *markup extension for WPF and Silverlight. To bind to commands in xaml, use the following code:</p>
<pre class="nocode">&lt;Ribbon catel:StackGrid.ColumnSpan=&quot;4&quot;&gt;
    &lt;RibbonTab Header=&quot;Home&quot; KeyTip=&quot;H&quot; &gt;
        &lt;RibbonGroup Header=&quot;Example commands&quot;&gt;
            &lt;RibbonButton Command=&quot;{catel:CommandManagerBinding Refresh}&quot; LargeImageSource=&quot;..\Resources\Images\Refresh.png&quot; 
                          Label=&quot;Refresh&quot; KeyTip=&quot;F5&quot; /&gt;
        &lt;/RibbonGroup&gt;
    &lt;/RibbonTab&gt;
&lt;/Ribbon&gt;
</pre><p>As the code shows, the <em>CommandManagerBinding</em> extension automatically resolves the <em>Refresh</em> command from the <em>CommandManager</em>.</p>
<h2 id="command-containers">Command containers<a class="headerlink" href="#command-containers" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>When implementing a ribbon or any menu structure inside an application can result in a very complex view model containing all the commands. Catel solves this issue by implementing so-called command containers. These are containers that have only 1 purpose: contain a command so the logic can easily be viewed / edited and the commands will be available during the whole lifetime of the app. Internally command containers use the <em>ICommandManager</em> to register commands, so the <em>ICommandManager</em> is still responsible for the commands.</p>
<h3 id="creating-a-command-container">Creating a command container<a class="headerlink" href="#creating-a-command-container" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Creating a command container is very simple. It can be done by creating a class deriving from <em>CommandContainerBase</em> as shown in the example below:</p>
<pre class="nocode">public class ApplicationAboutCommandContainer : CommandContainerBase
{
    private readonly IAboutService _aboutService;

    public ApplicationAboutCommandContainer(ICommandManager commandManager, IAboutService aboutService)
        : base(Commands.Application.About, commandManager)
    {
        Argument.IsNotNull(() =&gt; aboutService);

        _aboutService = aboutService;
    }

    protected override Execute(object parameter)
    {
        _aboutService.ShowAbout();
    }
}
</pre><p>As you can see the implementation is very clean and won't pollute any other view models.</p>
<h3 id="registering-a-command-container">Registering a command container<a class="headerlink" href="#registering-a-command-container" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>If you don't use the extension methods below, you must register the command container inside the service locator and register the command inside the <em>ICommandManager</em>. To make this process easier, use a definition file and the code below.</p>
<h4 id="command-definitions">Command definitions<a class="headerlink" href="#command-definitions" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h4>
<p>To make it very easy to register new commands, Catel uses naming conventions and extension methods. The name of the command (for example, <em>About</em> must be a constant on the command definitions class). If the command definition also contains a <em>&lt;CommandName&gt;InputGesture</em>, in this case <em>AboutInputGesture</em>, it will use that input gesture as a default to register the command with.</p>
<pre class="nocode">public static class Commands
{
    public static class Application
    {
        public const string Exit = &quot;Application.Exit&quot;;
        public static readonly InputGesture ExitInputGesture = new InputGesture(Key.F4, ModifierKeys.Alt);

        public const string About = &quot;Application.About&quot;;
        public static readonly InputGesture AboutInputGesture = new InputGesture(Key.F1);
    }
 
    public static class OtherPartOfApplication
    {
        public const string SomeCommand = &quot;OtherPartOfApplication.SomeCommand&quot;;
        public static readonly InputGesture SomeCommandInputGesture = null;
    }
}
</pre><p>It is recommended to keep a well formed structure for your command definitions to keep them manageable, even in very large applications</p>
<h4 id="registering-the-command-container">Registering the command container<a class="headerlink" href="#registering-the-command-container" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h4>
<p>Once you have the command container and the command definition (command name and the input gesture), it is time to register the command container:</p>
<pre class="nocode">var commandManager = ServiceLocator.Default.ResolveType&lt;ICommandManager&gt;();
 
commandManager.CreateCommandWithGesture(typeof(Commands.Application), &quot;About&quot;);
</pre><p>This will keep the command registration very readable and maintainable when using a lot of commands:</p>
<pre class="nocode">var commandManager = ServiceLocator.Default.ResolveType&lt;ICommandManager&gt;();
 
commandManager.CreateCommandWithGesture(typeof(AppCommands.Application), &quot;Exit&quot;);
commandManager.CreateCommandWithGesture(typeof(AppCommands.Application), &quot;About&quot;);

commandManager.CreateCommandWithGesture(typeof(Commands.Project), &quot;Open&quot;);
commandManager.CreateCommandWithGesture(typeof(Commands.Project), &quot;Save&quot;);
commandManager.CreateCommandWithGesture(typeof(Commands.Project), &quot;SaveAs&quot;);
commandManager.CreateCommandWithGesture(typeof(Commands.Project), &quot;Refresh&quot;);

commandManager.CreateCommandWithGesture(typeof(AppCommands.Settings), &quot;ToggleTooltips&quot;);
commandManager.CreateCommandWithGesture(typeof(AppCommands.Settings), &quot;ToggleQuickFilters&quot;);

commandManager.CreateCommandWithGesture(typeof(ExtensibilityCommands.Application), &quot;Extensions&quot;);
commandManager.CreateCommandWithGesture(typeof(ExtensibilityCommands.Application), &quot;ExtensionsSettings&quot;);
</pre>
                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">

                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="../../js/jquery-2.1.1.min.js"></script>
    <script src="../../js/modernizr-2.8.3.min.js"></script>
    <script src="../../js/highlight.pack.js"></script>
    <script src="../../js/theme.js"></script>

    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
    
      ga('create', 'UA-25600919-4', 'auto');
      ga('send', 'pageview');
    
    </script>
</body>
</html>
