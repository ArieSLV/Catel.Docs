<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Using a tabbed interface with MVVM - Catel documentation</title>
    <link rel="shortcut icon" href="../../../favicon.ico">
    <link rel="stylesheet" href="../../../css/theme.css" type="text/css" />
    <link rel="stylesheet" href="../../../css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="../../../css/styles/vs.css">
    <link rel="stylesheet" href="../../../css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="/welcome/index.htm"><i class="fa fa-home"></i> Catel documentation</a>
                <div role="search">
                    <form id="search-form" class="form" action="../../../Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="../../../home.htm">Home</a>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../introduction/">Introduction</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../faq/">FAQ</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../setup-deployment/">Setup, deployment & projects</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../getting-started/">Getting started</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../examples/">Examples</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../catel-core/">Catel.Core</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../catel-mvvm/">Catel.MVVM</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../catel-fody/">Catel.Fody</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../catel-resharper/">Catel.ReSharper</a></span>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../../../tips-tricks/">Tips & tricks</a></span></li>

<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../../../tips-tricks/mvvm/">Catel.MVVM</a></span></li>
<li class="tocentry"><a href="../../../tips-tricks/mvvm/finding-view-of-view-model/">Finding the view of a view model</a>
</li>
<li class="tocentry"><a href="../../../tips-tricks/mvvm/requery-commands-automatically/">Requery commands automatically</a>
</li>
<li class="tocentry current"><a class="current" href="../../../tips-tricks/mvvm/using-tabbed-interface-with-mvvm/">Using a tabbed interface with MVVM</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#creating-the-model-describing-a-tab-item">Creating the model describing a tab item</a></li>

<li class="tocentry"><a href="#creating-the-service">Creating the service</a></li>
<li class="tocentry">
<ul class="currentrelative">
<li class="tocentry"><a href="#interface">Interface</a></li>

<li class="tocentry"><a href="#implementation">Implementation</a></li>


</ul>
</li>

<li class="tocentry"><a href="#creating-the-views">Creating the views</a></li>
<li class="tocentry">
<ul class="currentrelative">
<li class="tocentry"><a href="#creating-closabletabitem">Creating ClosableTabItem</a></li>

<li class="tocentry"><a href="#creating-main-view-tab-control-container">Creating main view (tab control container)</a></li>


</ul>
</li>

<li class="tocentry"><a href="#useful-extension-methods">Useful extension methods</a></li>
<li class="tocentry">
<ul class="currentrelative">
<li class="tocentry"><a href="#itabserviceextensions">ITabServiceExtensions</a></li>

<li class="tocentry"><a href="#tabcontrolextensions">TabControlExtensions</a></li>


</ul>
</li>

<li class="tocentry"><a href="#using-the-service">Using the service</a></li>
<li class="tocentry">
<ul class="currentrelative">
<li class="tocentry"><a href="#adding-a-new-tab-and-activate-it">Adding a new tab and activate it</a></li>

<li class="tocentry"><a href="#closing-a-tab-from-withing-a-view-model">Closing a tab from withing a view model</a></li>

<li class="tocentry"><a href="#closing-a-tab-from-outside-a-view-model">Closing a tab from outside a view model</a></li>


</ul>
</li>

<li class="tocentry"><a href="#download-example">Download example</a></li>



</ul>

</ul>
</li>
</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../../reference/">API reference</a></span>
</li>

</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="../../../index.htm">Catel documentation</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="../../../home.htm">Home</a></li> / <li><a href="../../../tips-tricks/index.htm">Tips & tricks</a></li> / <li><a href="../../../tips-tricks/mvvm/index.htm">Catel.MVVM</a></li> / <li><a href="../../../tips-tricks/mvvm/using-tabbed-interface-with-mvvm/index.htm">Using a tabbed interface with MVVM</a></li></ul>

                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="using-a-tabbed-interface-with-mvvm">Using a tabbed interface with MVVM<a class="headerlink" href="#using-a-tabbed-interface-with-mvvm" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>A common scenario in WPF is to use a tabbed interface to give the user the option to use multiple main views in a tabbed environment. This example shows how to implement this correctly with both closable and non-closable tabs.</p>
<p>For this example, we will have a few requirements:</p>
<ul>
<li>Be able to add, close and activate tabs via a service</li>
<li>Be able to specify whether a tab can be closed by the end-user</li>
</ul>
<p><img src="../../../images/tips-tricks/mvvm/using-tabbed-interface-with-mvvm/example.gif" width="1200" height="824" /></p>
<h2 id="creating-the-model-describing-a-tab-item">Creating the model describing a tab item<a class="headerlink" href="#creating-the-model-describing-a-tab-item" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>First of all, we need a model describing a tab item so we can interact with a service. We want the tab to be closeable via the service, but also via the view model it is representing.</p>
<pre class="nocode">public namespace TabDemo
{
    using System;
    using System.Threading.Tasks;
    using Catel;
    using Catel.MVVM;

    public class TabItem
    {
        public TabItem(IViewModel viewModel)
        {
            Argument.IsNotNull(() =&gt; viewModel);

            ViewModel = viewModel;
            CanClose = true;

            if (!viewModel.IsClosed)
            {
                viewModel.ClosedAsync += OnViewModelClosed;
            }
        }

        public IViewModel ViewModel { get; private set; }

        public bool CanClose { get; set; }

        public object Tag { get; set; }

        public event EventHandler&lt;EventArgs&gt; Closed; 

        private async Task OnViewModelClosed(object sender, ViewModelClosedEventArgs e)
        {
            var vm = ViewModel;
            if (vm != null)
            {
                vm.ClosedAsync -= OnViewModelClosed;
            }

            Closed.SafeInvoke(this);
        }
    }
}
</pre><p>Because we subscribe to theÂ <em>ClosedAsync</em> event, we can close the tab from withing the view model.</p>
<h2 id="creating-the-service">Creating the service<a class="headerlink" href="#creating-the-service" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<h3 id="interface">Interface<a class="headerlink" href="#interface" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<pre class="nocode">namespace TabDemo.Services
{
    using System;
    using System.Collections.Generic;

    public interface ITabService
    {
        /// &lt;summary&gt;
        /// Gets all the tabs.
        /// &lt;/summary&gt;
        /// &lt;value&gt;The tabs.&lt;/value&gt;
        IEnumerable&lt;TabItem&gt; Tabs { get; }

        /// &lt;summary&gt;
        /// Gets the selected tab.
        /// &lt;/summary&gt;
        /// &lt;value&gt;The selected tab.&lt;/value&gt;
        TabItem SelectedTab { get; }

        /// &lt;summary&gt;
        /// Occurs when the selected tab has changed.
        /// &lt;/summary&gt;
        event EventHandler&lt;TabItemEventArgs&gt; SelectedTabChanged;

        /// &lt;summary&gt;
        /// Determines whether the specified tab item is visible.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;tabItem&quot;&gt;The tab item.&lt;/param&gt;
        /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the specified tab item is visible; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt;
        /// &lt;exception cref=&quot;ArgumentNullException&quot;&gt;The &lt;paramref name=&quot;tabItem&quot;/&gt; is &lt;c&gt;null&lt;/c&gt;.&lt;/exception&gt;
        bool IsVisible(TabItem tabItem);

        /// &lt;summary&gt;
        /// Determines whether the specified tab item is active.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;tabItem&quot;&gt;The tab item.&lt;/param&gt;
        /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the specified tab item is active; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt;
        /// &lt;exception cref=&quot;ArgumentNullException&quot;&gt;The &lt;paramref name=&quot;tabItem&quot;/&gt; is &lt;c&gt;null&lt;/c&gt;.&lt;/exception&gt;
        bool IsActive(TabItem tabItem);

        /// &lt;summary&gt;
        /// Shows the specified tab item in a tab.
        /// &lt;para /&gt;
        /// If the tab is already in the list of open tabs, this method won't do anything.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;tabItem&quot;&gt;The tab item.&lt;/param&gt;
        /// &lt;exception cref=&quot;ArgumentNullException&quot;&gt;The &lt;paramref name=&quot;tabItem&quot;/&gt; is &lt;c&gt;null&lt;/c&gt;.&lt;/exception&gt;
        void Add(TabItem tabItem);

        /// &lt;summary&gt;
        /// Shows the specified tab item in a tab.
        /// &lt;para /&gt;
        /// If the tab is already in the list of open tabs, this method won't do anything.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;index&quot;&gt;The index.&lt;/param&gt;
        /// &lt;param name=&quot;tabItem&quot;&gt;The tab item.&lt;/param&gt;
        /// &lt;exception cref=&quot;ArgumentNullException&quot;&gt;The &lt;paramref name=&quot;tabItem&quot; /&gt; is &lt;c&gt;null&lt;/c&gt;.&lt;/exception&gt;
        void Insert(int index, TabItem tabItem);

        /// &lt;summary&gt;
        /// Activates the specified tab item.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;tabItem&quot;&gt;The tab item.&lt;/param&gt;
        /// &lt;exception cref=&quot;ArgumentNullException&quot;&gt;The &lt;paramref name=&quot;tabItem&quot;/&gt; is &lt;c&gt;null&lt;/c&gt;.&lt;/exception&gt;
        /// &lt;exception cref=&quot;InvalidOperationException&quot;&gt;The &lt;paramref name=&quot;tabItem&quot;/&gt; is not visible, use &lt;see cref=&quot;Add&quot;/&gt; first.&lt;/exception&gt;
        void Activate(TabItem tabItem);

        /// &lt;summary&gt;
        /// Hides the specified tab item.
        /// &lt;para /&gt;
        /// If the tab is not in the list of open tabs, this method won't do anything.
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;tabItem&quot;&gt;The tab item.&lt;/param&gt;
        /// &lt;exception cref=&quot;ArgumentNullException&quot;&gt;The &lt;paramref name=&quot;tabItem&quot;/&gt; is &lt;c&gt;null&lt;/c&gt;.&lt;/exception&gt;
        void Remove(TabItem tabItem);
    }
}
</pre><h3 id="implementation">Implementation<a class="headerlink" href="#implementation" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<pre class="nocode">namespace TabDemo.Services
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Windows.Controls;
    using Catel;
    using Catel.Logging;
    using Catel.MVVM;
    using Catel.Windows.Threading;
    using TabItem = TabDemo.TabItem;

    public class TabService : ITabService
    {
        private static readonly ILog Log = LogManager.GetCurrentClassLogger();

        private TabControl _tabControl;

        public TabService()
        {
        }

        public IEnumerable&lt;TabItem&gt; Tabs
        {
            get
            {
                if (_tabControl == null)
                {
                    return new List&lt;TabItem&gt;();
                }

                return (from tab in _tabControl.Items.Cast&lt;object&gt;()
                        where tab is TabItem
                        select (TabItem)tab).ToList();
            }
        }

        public TabItem SelectedTab
        {
            get
            {
                if (_tabControl == null)
                {
                    return null;
                }

                var tabItem = _tabControl.SelectedItem as TabItem;
                return tabItem;
            }
        }

        public event EventHandler&lt;TabItemEventArgs&gt; SelectedTabChanged;

        internal void SetTabControl(TabControl tabControl)
        {
            Argument.IsNotNull(() =&gt; tabControl);

            if (_tabControl != null)
            {
                _tabControl.SelectionChanged -= OnTabControlSelectionChanged;
            }

            _tabControl = tabControl;
            _tabControl.SelectionChanged += OnTabControlSelectionChanged;
        }

        public bool IsVisible(TabItem tabItem)
        {
            Argument.IsNotNull(() =&gt; tabItem);

            if (_tabControl == null)
            {
                return false;
            }

            var isVisible = (from item in _tabControl.Items.Cast&lt;object&gt;()
                             where ReferenceEquals(tabItem, item)
                             select true).Any();
            return isVisible;
        }

        public bool IsActive(TabItem tabItem)
        {
            Argument.IsNotNull(() =&gt; tabItem);

            if (_tabControl == null)
            {
                return false;
            }

            var selectedTab = SelectedTab;
            var isActive = ReferenceEquals(selectedTab, tabItem);
            return isActive;
        }

        public void Add(TabItem tabItem)
        {
            Argument.IsNotNull(() =&gt; tabItem);

            if (_tabControl == null)
            {
                return;
            }

            Insert(_tabControl.Items.Count, tabItem);
        }

        public void Insert(int index, TabItem tabItem)
        {
            Argument.IsNotNull(() =&gt; tabItem);

            if (_tabControl == null)
            {
                return;
            }

            var isVisible = IsVisible(tabItem);
            if (isVisible)
            {
                return;
            }

            tabItem.Closed += OnTabItemClosed;

            _tabControl.Items.Insert(index, tabItem);
        }

        public void Activate(TabItem tabItem)
        {
            Argument.IsNotNull(() =&gt; tabItem);

            if (_tabControl == null)
            {
                return;
            }

            var isVisible = IsVisible(tabItem);
            if (!isVisible)
            {
                throw Log.ErrorAndCreateException&lt;InvalidOperationException&gt;(&quot;Tab item is not visible, use the Show() method first&quot;);
            }

            _tabControl.SelectedItem = tabItem;
        }

        public void Remove(TabItem tabItem)
        {
            Argument.IsNotNull(() =&gt; tabItem);

            if (_tabControl == null)
            {
                return;
            }

            tabItem.Closed -= OnTabItemClosed;

            _tabControl.RemoveAndUpdateSelection(tabItem);
        }

        private void OnTabItemClosed(object sender, EventArgs e)
        {
            var tabItem = sender as TabItem;
            if (tabItem != null)
            {
                tabItem.Closed -= OnTabItemClosed;

                if (_tabControl == null)
                {
                    return;
                }

                _tabControl.Dispatcher.BeginInvoke(() =&gt; Remove(tabItem));
            }
        }

        private void OnTabControlSelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            var handler = SelectedTabChanged;
            if (handler != null)
            {
                var selectedTab = SelectedTab;
                handler(this, new TabItemEventArgs(selectedTab));
            }
        }
    }
}
</pre><h2 id="creating-the-views">Creating the views<a class="headerlink" href="#creating-the-views" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>For this to work, the service needs to interact with views. We have a few views to create.</p>
<h3 id="creating-closabletabitem">Creating ClosableTabItem<a class="headerlink" href="#creating-closabletabitem" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<h4 id="xaml">Xaml<a class="headerlink" href="#xaml" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h4>
<pre class="nocode">&lt;UserControl x:Class=&quot;TabDemo.Controls.ClosableTabItem&quot;
             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
             xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot; 
             xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;
             xmlns:orchestra=&quot;https://github.com/orcomp/orchestra&quot;
             xmlns:gum=&quot;http://www.wildgums.net.au/gum&quot;
             xmlns:catel=&quot;http://catel.codeplex.com&quot;
             xmlns:controls=&quot;clr-namespace:TabDemo.Controls&quot;
             mc:Ignorable=&quot;d&quot; d:DesignHeight=&quot;300&quot; d:DesignWidth=&quot;300&quot;&gt;

    &lt;StackPanel Orientation=&quot;Horizontal&quot;&gt;
        &lt;TextBlock Text=&quot;{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:ClosableTabItem}}, Path=Title}&quot;/&gt;
        &lt;Button Click=&quot;OnCloseButtonClick&quot; Margin=&quot;5,0,0,0&quot; Background=&quot;Transparent&quot;
                Visibility=&quot;{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:ClosableTabItem}}, Path=CanClose, Converter={catel:BooleanToCollapsingVisibilityConverter}}&quot;&gt;

            &lt;Image Source=&quot;{Image Source to a close Image}&quot; Width=&quot;12&quot; Height=&quot;12&quot; /&gt;
        &lt;/Button&gt;
    &lt;/StackPanel&gt;

&lt;/UserControl&gt;
</pre><h4 id="code-behind">Code behind<a class="headerlink" href="#code-behind" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h4>
<pre class="nocode">namespace Tabdemo.Controls
{
    using System.Windows;
    using System.Windows.Controls;
    using System.Windows.Data;
    using Catel.MVVM;
    using Catel.Windows;

    public partial class ClosableTabItem
    {
        #region Constructors
        public ClosableTabItem()
        {
            InitializeComponent();

            Loaded += OnLoaded;
        }
        #endregion

        public string Title
        {
            get { return (string)GetValue(TitleProperty); }
            set { SetValue(TitleProperty, value); }
        }

        public static readonly DependencyProperty TitleProperty = DependencyProperty.Register(&quot;Title&quot;, typeof(string),
            typeof(ClosableTabItem), new PropertyMetadata(string.Empty));


        public bool CanClose
        {
            get { return (bool)GetValue(CanCloseProperty); }
            set { SetValue(CanCloseProperty, value); }
        }

        public static readonly DependencyProperty CanCloseProperty = DependencyProperty.Register(&quot;CanClose&quot;, typeof(bool), 
            typeof(ClosableTabItem), new PropertyMetadata(true));


        private void OnLoaded(object sender, RoutedEventArgs e)
        {
            var vmContainer = Content as IViewModelContainer;
            if (vmContainer == null)
            {
                return;
            }

            var vm = vmContainer.ViewModel;
            if (vm == null)
            {
                var frameworkElement = vmContainer as FrameworkElement;
                if (frameworkElement != null)
                {
                    vm = frameworkElement.DataContext as IViewModel;
                }

                if (vm == null)
                {
                    return;
                }
            }

            SetBinding(TitleProperty, new Binding
            {
                Source = vm,
                Path = new PropertyPath(&quot;Title&quot;)
            });
        }

        private void OnCloseButtonClick(object sender, RoutedEventArgs e)
        {
            if (!CanClose)
            {
                return;
            }

            var tabControl = this.FindVisualAncestorByType&lt;TabControl&gt;();
            if (tabControl != null)
            {
                tabControl.RemoveAndUpdateSelection(DataContext);
            }
        }
    }
}
</pre><h3 id="creating-main-view-tab-control-container">Creating main view (tab control container)<a class="headerlink" href="#creating-main-view-tab-control-container" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<h4 id="xaml-1">Xaml<a class="headerlink" href="#xaml-1" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h4>
<pre class="nocode">&lt;catel:UserControl x:Class=&quot;TabDemo.Views.MainView&quot;
                   xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
                   xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
                   xmlns:catel=&quot;http://catel.codeplex.com&quot;
                   xmlns:controls=&quot;clr-namespace:TabDemo.Controls&quot;&gt;

    &lt;catel:TabControl x:Name=&quot;tabControl&quot; Margin=&quot;-2&quot; LoadTabItems=&quot;LazyLoading&quot;&gt;
        &lt;TabControl.ItemTemplate&gt;
            &lt;DataTemplate&gt;
                &lt;controls:ClosableTabItem Title=&quot;{Binding ViewModel.Title}&quot; CanClose=&quot;{Binding CanClose}&quot; /&gt;
            &lt;/DataTemplate&gt;
        &lt;/TabControl.ItemTemplate&gt;

        &lt;TabControl.ContentTemplate&gt;
            &lt;DataTemplate&gt;
                &lt;ContentControl Content=&quot;{Binding ViewModel, Converter={catel:ViewModelToViewConverter}}&quot; /&gt;
            &lt;/DataTemplate&gt;
        &lt;/TabControl.ContentTemplate&gt;
    &lt;/catel:TabControl&gt;

&lt;/catel:UserControl&gt;
</pre><h4 id="code-behind-1">Code behind<a class="headerlink" href="#code-behind-1" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h4>
<pre class="nocode">namespace TabDemo.Views
{
    using Catel.IoC;
    using Services;

    public partial class MainView
    {
        public MainView()
        {
            InitializeComponent();

            var serviceLocator = this.GetServiceLocator();

            var tabService = serviceLocator.ResolveType&lt;ITabService&gt;() as TabService;
            if (tabService != null)
            {
                tabService.SetTabControl(tabControl);
            }
        }
    }
}
</pre><h2 id="useful-extension-methods">Useful extension methods<a class="headerlink" href="#useful-extension-methods" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Here are some useful extension methods</p>
<h3 id="itabserviceextensions">ITabServiceExtensions<a class="headerlink" href="#itabserviceextensions" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<pre class="nocode">namespace TabDemo.Services
{
    using Catel;
    using Catel.IoC;
    using Catel.MVVM;
    using Services;

    public static class ITabServiceExtensions
    {
        public static TabItem Add&lt;TViewModel&gt;(this ITabService tabService, object dataContext = null, bool canClose = false)
            where TViewModel : IViewModel
        {
            Argument.IsNotNull(() =&gt; tabService);

            var tabItem = CreateTabItem&lt;TViewModel&gt;(tabService, dataContext);
            tabItem.CanClose = canClose;

            tabService.Add(tabItem);

            return tabItem;
        }

        public static TabItem AddAndActivate&lt;TViewModel&gt;(this ITabService tabService, object dataContext = null, bool canClose = false)
            where TViewModel : IViewModel
        {
            Argument.IsNotNull(() =&gt; tabService);

            var tabItem = Add&lt;TViewModel&gt;(tabService, dataContext, canClose);
            tabService.Activate(tabItem);

            return tabItem;
        }

        public static TabItem CreateTabItem&lt;TViewModel&gt;(this ITabService tabService, object dataContext)
            where TViewModel : IViewModel
        {
            Argument.IsNotNull(() =&gt; tabService);

            var dependencyResolver = tabService.GetDependencyResolver();
            var viewModelFactory = dependencyResolver.Resolve&lt;IViewModelFactory&gt;();

            var vm = viewModelFactory.CreateViewModel&lt;TViewModel&gt;(dataContext);
            return new TabItem(vm);
        }

        public static void AddAndActivate(this ITabService tabService, TabItem tabItem)
        {
            Argument.IsNotNull(() =&gt; tabService);
            Argument.IsNotNull(() =&gt; tabItem);

            tabService.Add(tabItem);
            tabService.Activate(tabItem);
        }
    }
}
</pre><h3 id="tabcontrolextensions">TabControlExtensions<a class="headerlink" href="#tabcontrolextensions" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<pre class="nocode">namespace TabDemo.Services
{
    using System.Linq;
    using System.Windows.Controls;

    public static class TabControlExtensions
    {
        public static bool RemoveAndUpdateSelection(this TabControl tabControl, object tabItem)
        {
            var index = tabControl.Items.IndexOf(tabItem);
            if (index == -1)
            {
                return false;
            }

            var wasSelected = ReferenceEquals(tabControl.SelectedItem, tabItem);

            tabControl.Items.RemoveAt(index);

            if (wasSelected)
            {
                var newIndex = index;
                var newItem = newIndex &lt; tabControl.Items.Count ? tabControl.Items[newIndex] : tabControl.Items.Cast&lt;object&gt;().LastOrDefault(x =&gt; x is TabItem);

                tabControl.SelectedItem = newItem;
            }

            return true;
        }
    }
}
</pre><p>Â </p>
<h2 id="using-the-service">Using the service<a class="headerlink" href="#using-the-service" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<h3 id="adding-a-new-tab-and-activate-it">Adding a new tab and activate it<a class="headerlink" href="#adding-a-new-tab-and-activate-it" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>This adds and activates a new tab which the user is allowed to close:</p>
<pre class="nocode">_tabService.AddAndActivate&lt;DemoTabViewModel&gt;(null, true);
</pre><h3 id="closing-a-tab-from-withing-a-view-model">Closing a tab from withing a view model<a class="headerlink" href="#closing-a-tab-from-withing-a-view-model" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>This closes a tab from within a tab view model. Closing a view model causes theÂ <em>TabItem</em> to raise theÂ <em>Closed</em> event and theÂ <em>TabService</em> will correctly close the tab and update its selection.</p>
<pre class="nocode">this.SaveAndCloseViewModelAsync();
</pre><h3 id="closing-a-tab-from-outside-a-view-model">Closing a tab from outside a view model<a class="headerlink" href="#closing-a-tab-from-outside-a-view-model" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>This closes the currently active tab:</p>
<pre class="nocode">var selectedTab = _tabService.SelectedTab;
_tabService.Remove(selectedTab);
</pre><h2 id="download-example">Download example<a class="headerlink" href="#download-example" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p><a href="../../images/tips-tricks/mvvm/using-tabbed-interface-with-mvvm/example.rar">Download example</a></p>

                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">

                      <p>
					    Is this section not up-to-date or found an issue? Please <a href="https://github.com/Catel/Catel.Docs/blob/master/src/../src/5.0/tips-tricks/mvvm/using-tabbed-interface-with-mvvm.md" target="_blank">contribute</a>!
					  </p>
					  <p>
					    Have a question about Catel? Use <a href="https://stackoverflow.com/questions/tagged/catel" target="_blank">StackOverflow</a> with the <i>Catel</i> tag!
					  </p>
					  <hr />
					  <p>
					    <h2>Discussion</h2>
					   <div id="disqus_thread"></div>
					   <script>
					   var disqus_config = function () {
					   this.page.url = 'http://docs.catelproject.com/tips-tricks/mvvm/using-tabbed-interface-with-mvvm/index.htm';
					   this.page.identifier = '../src/5.0/tips-tricks/mvvm/using-tabbed-interface-with-mvvm.md';
					   };
					   (function() { // DON'T EDIT BELOW THIS LINE
					   var d = document, s = d.createElement('script');
					   s.src = 'https://catel-docs.disqus.com/embed.js';
					   s.setAttribute('data-timestamp', +new Date());
					   (d.head || d.body).appendChild(s);
					   })();
					   </script>
					   <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
					  </p>
					</div>
                </footer>
            </div>
        </section>
    </div>
    <script src="../../../js/jquery-2.1.1.min.js"></script>
    <script src="../../../js/modernizr-2.8.3.min.js"></script>
    <script src="../../../js/highlight.pack.js"></script>
    <script src="../../../js/theme.js"></script>

    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
    
      ga('create', 'UA-25600919-4', 'auto');
      ga('send', 'pageview');
    
    </script>
</body>
</html>
